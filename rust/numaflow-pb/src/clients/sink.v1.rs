// This file is @generated by prost-build.
/// *
/// SinkRequest represents a request element.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SinkRequest {
    /// Required field indicating the request.
    #[prost(message, optional, tag = "1")]
    pub request: ::core::option::Option<sink_request::Request>,
    /// Required field indicating the status of the request.
    /// If eot is set to true, it indicates the end of transmission.
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<TransmissionStatus>,
    /// optional field indicating the handshake message.
    #[prost(message, optional, tag = "3")]
    pub handshake: ::core::option::Option<Handshake>,
}
/// Nested message and enum types in `SinkRequest`.
pub mod sink_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Request {
        #[prost(string, repeated, tag = "1")]
        pub keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(bytes = "vec", tag = "2")]
        pub value: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "3")]
        pub event_time: ::core::option::Option<::prost_types::Timestamp>,
        #[prost(message, optional, tag = "4")]
        pub watermark: ::core::option::Option<::prost_types::Timestamp>,
        #[prost(string, tag = "5")]
        pub id: ::prost::alloc::string::String,
        #[prost(map = "string, string", tag = "6")]
        pub headers: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            ::prost::alloc::string::String,
        >,
    }
}
///
/// Handshake message between client and server to indicate the start of transmission.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Handshake {
    /// Required field indicating the start of transmission.
    #[prost(bool, tag = "1")]
    pub sot: bool,
}
/// *
/// ReadyResponse is the health check result.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadyResponse {
    #[prost(bool, tag = "1")]
    pub ready: bool,
}
/// *
/// TransmissionStatus is the status of the transmission.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransmissionStatus {
    #[prost(bool, tag = "1")]
    pub eot: bool,
}
/// *
/// SinkResponse is the individual response of each message written to the sink.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SinkResponse {
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<sink_response::Result>,
    #[prost(message, optional, tag = "2")]
    pub handshake: ::core::option::Option<Handshake>,
    #[prost(message, optional, tag = "3")]
    pub status: ::core::option::Option<TransmissionStatus>,
}
/// Nested message and enum types in `SinkResponse`.
pub mod sink_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Result {
        /// id is the ID of the message, can be used to uniquely identify the message.
        #[prost(string, tag = "1")]
        pub id: ::prost::alloc::string::String,
        /// status denotes the status of persisting to sink. It can be SUCCESS, FAILURE, or FALLBACK.
        #[prost(enumeration = "super::Status", tag = "2")]
        pub status: i32,
        /// err_msg is the error message, set it if success is set to false.
        #[prost(string, tag = "3")]
        pub err_msg: ::prost::alloc::string::String,
    }
}
///
/// Status is the status of the response.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    Success = 0,
    Failure = 1,
    Fallback = 2,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Success => "SUCCESS",
            Self::Failure => "FAILURE",
            Self::Fallback => "FALLBACK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUCCESS" => Some(Self::Success),
            "FAILURE" => Some(Self::Failure),
            "FALLBACK" => Some(Self::Fallback),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod sink_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SinkClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SinkClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SinkClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SinkClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SinkClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SinkFn writes the request to a user defined sink.
        pub async fn sink_fn(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::SinkRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SinkResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/sink.v1.Sink/SinkFn");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("sink.v1.Sink", "SinkFn"));
            self.inner.streaming(req, path, codec).await
        }
        /// IsReady is the heartbeat endpoint for gRPC.
        pub async fn is_ready(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<tonic::Response<super::ReadyResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/sink.v1.Sink/IsReady");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("sink.v1.Sink", "IsReady"));
            self.inner.unary(req, path, codec).await
        }
    }
}
