// This file is @generated by prost-build.
///
/// Handshake message between client and server to indicate the start of transmission.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Handshake {
    /// Required field indicating the start of transmission.
    #[prost(bool, tag = "1")]
    pub sot: bool,
}
///
/// ReadRequest is the request for reading datum stream from user defined source.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadRequest {
    /// Required field indicating the request.
    #[prost(message, optional, tag = "1")]
    pub request: ::core::option::Option<read_request::Request>,
    #[prost(message, optional, tag = "2")]
    pub handshake: ::core::option::Option<Handshake>,
}
/// Nested message and enum types in `ReadRequest`.
pub mod read_request {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Request {
        /// Required field indicating the number of records to read.
        #[prost(uint64, tag = "1")]
        pub num_records: u64,
        /// Required field indicating the request timeout in milliseconds.
        /// uint32 can represent 2^32 milliseconds, which is about 49 days.
        /// We don't use uint64 because time.Duration takes int64 as nano seconds. Using uint64 for milli will cause overflow.
        #[prost(uint32, tag = "2")]
        pub timeout_in_ms: u32,
    }
}
///
/// ReadResponse is the response for reading datum stream from user defined source.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadResponse {
    /// Required field holding the result.
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<read_response::Result>,
    /// Status of the response. Holds the end of transmission flag and the status code.
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<read_response::Status>,
    /// Handshake message between client and server to indicate the start of transmission.
    #[prost(message, optional, tag = "3")]
    pub handshake: ::core::option::Option<Handshake>,
}
/// Nested message and enum types in `ReadResponse`.
pub mod read_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Result {
        /// Required field holding the payload of the datum.
        #[prost(bytes = "vec", tag = "1")]
        pub payload: ::prost::alloc::vec::Vec<u8>,
        /// Required field indicating the offset information of the datum.
        #[prost(message, optional, tag = "2")]
        pub offset: ::core::option::Option<super::Offset>,
        /// Required field representing the time associated with each datum. It is used for watermarking.
        #[prost(message, optional, tag = "3")]
        pub event_time: ::core::option::Option<::prost_types::Timestamp>,
        /// Optional list of keys associated with the datum.
        /// Key is the "key" attribute in (key,value) as in the map-reduce paradigm.
        /// We add this optional field to support the use case where the user defined source can provide keys for the datum.
        /// e.g. Kafka and Redis Stream message usually include information about the keys.
        #[prost(string, repeated, tag = "4")]
        pub keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        /// Optional list of headers associated with the datum.
        /// Headers are the metadata associated with the datum.
        /// e.g. Kafka and Redis Stream message usually include information about the headers.
        #[prost(map = "string, string", tag = "5")]
        pub headers: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            ::prost::alloc::string::String,
        >,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Status {
        /// End of transmission flag.
        #[prost(bool, tag = "1")]
        pub eot: bool,
        #[prost(enumeration = "status::Code", tag = "2")]
        pub code: i32,
        #[prost(enumeration = "status::Error", optional, tag = "3")]
        pub error: ::core::option::Option<i32>,
        #[prost(string, optional, tag = "4")]
        pub msg: ::core::option::Option<::prost::alloc::string::String>,
    }
    /// Nested message and enum types in `Status`.
    pub mod status {
        /// Code to indicate the status of the response.
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Code {
            Success = 0,
            Failure = 1,
        }
        impl Code {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Success => "SUCCESS",
                    Self::Failure => "FAILURE",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "SUCCESS" => Some(Self::Success),
                    "FAILURE" => Some(Self::Failure),
                    _ => None,
                }
            }
        }
        /// Error to indicate the error type. If the code is FAILURE, then the error field will be populated.
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Error {
            Unacked = 0,
            Other = 1,
        }
        impl Error {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Unacked => "UNACKED",
                    Self::Other => "OTHER",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "UNACKED" => Some(Self::Unacked),
                    "OTHER" => Some(Self::Other),
                    _ => None,
                }
            }
        }
    }
}
///
/// AckRequest is the request for acknowledging datum.
/// It takes a list of offsets to be acknowledged.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AckRequest {
    /// Required field holding the request. The list will be ordered and will have the same order as the original Read response.
    #[prost(message, optional, tag = "1")]
    pub request: ::core::option::Option<ack_request::Request>,
    #[prost(message, optional, tag = "2")]
    pub handshake: ::core::option::Option<Handshake>,
}
/// Nested message and enum types in `AckRequest`.
pub mod ack_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Request {
        /// Required field holding the offset to be acked
        #[prost(message, optional, tag = "1")]
        pub offset: ::core::option::Option<super::Offset>,
    }
}
///
/// AckResponse is the response for acknowledging datum. It contains one empty field confirming
/// the batch of offsets that have been successfully acknowledged. The contract between client and server
/// is that the server will only return the AckResponse if the ack request is successful.
/// If the server hangs during the ack request, the client can decide to timeout and error out the data forwarder.
/// The reason why we define such contract is that we always expect the server to be able to process the ack request.
/// Client is expected to send the AckRequest to the server with offsets that are strictly
/// corresponding to the previously read batch. If the client sends the AckRequest with offsets that are not,
/// it is considered as a client error and the server will not return the AckResponse.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AckResponse {
    /// Required field holding the result.
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<ack_response::Result>,
    /// Handshake message between client and server to indicate the start of transmission.
    #[prost(message, optional, tag = "2")]
    pub handshake: ::core::option::Option<Handshake>,
}
/// Nested message and enum types in `AckResponse`.
pub mod ack_response {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Result {
        /// Required field indicating the ack request is successful.
        #[prost(message, optional, tag = "1")]
        pub success: ::core::option::Option<()>,
    }
}
///
/// ReadyResponse is the health check result for user defined source.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadyResponse {
    /// Required field holding the health check result.
    #[prost(bool, tag = "1")]
    pub ready: bool,
}
///
/// PendingResponse is the response for the pending request.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PendingResponse {
    /// Required field holding the result.
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<pending_response::Result>,
}
/// Nested message and enum types in `PendingResponse`.
pub mod pending_response {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Result {
        /// Required field holding the number of pending records at the user defined source.
        /// A negative count indicates that the pending information is not available.
        #[prost(int64, tag = "1")]
        pub count: i64,
    }
}
///
/// PartitionsResponse is the response for the partitions request.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartitionsResponse {
    /// Required field holding the result.
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<partitions_response::Result>,
}
/// Nested message and enum types in `PartitionsResponse`.
pub mod partitions_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Result {
        /// Required field holding the list of partitions.
        #[prost(int32, repeated, tag = "1")]
        pub partitions: ::prost::alloc::vec::Vec<i32>,
    }
}
///
/// Offset is the offset of the datum.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Offset {
    /// offset is the offset of the datum. This field is required.
    /// We define Offset as a byte array because different input data sources can have different representations for Offset.
    /// The only way to generalize it is to define it as a byte array,
    /// Such that we can let the UDSource to de-serialize the offset using its own interpretation logics.
    #[prost(bytes = "vec", tag = "1")]
    pub offset: ::prost::alloc::vec::Vec<u8>,
    /// Optional partition_id indicates which partition of the source the datum belongs to.
    /// It is useful for sources that have multiple partitions. e.g. Kafka.
    /// If the partition_id is not specified, it is assumed that the source has a single partition.
    #[prost(int32, tag = "2")]
    pub partition_id: i32,
}
/// Generated client implementations.
pub mod source_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SourceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SourceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SourceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SourceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SourceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Read returns a stream of datum responses.
        /// The size of the returned responses is less than or equal to the num_records specified in each ReadRequest.
        /// If the request timeout is reached on the server side, the returned responses will contain all the datum that have been read (which could be an empty list).
        /// The server will continue to read and respond to subsequent ReadRequests until the client closes the stream.
        /// Once it has sent all the datum, the server will send a ReadResponse with the end of transmission flag set to true.
        pub async fn read_fn(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::ReadRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ReadResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/source.v1.Source/ReadFn");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("source.v1.Source", "ReadFn"));
            self.inner.streaming(req, path, codec).await
        }
        /// AckFn acknowledges a stream of datum offsets.
        /// When AckFn is called, it implicitly indicates that the datum stream has been processed by the source vertex.
        /// The caller (numa) expects the AckFn to be successful, and it does not expect any errors.
        /// If there are some irrecoverable errors when the callee (UDSource) is processing the AckFn request,
        /// then it is best to crash because there are no other retry mechanisms possible.
        /// Clients sends n requests and expects n responses.
        pub async fn ack_fn(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::AckRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::AckResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/source.v1.Source/AckFn");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("source.v1.Source", "AckFn"));
            self.inner.streaming(req, path, codec).await
        }
        /// PendingFn returns the number of pending records at the user defined source.
        pub async fn pending_fn(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::PendingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/source.v1.Source/PendingFn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("source.v1.Source", "PendingFn"));
            self.inner.unary(req, path, codec).await
        }
        /// PartitionsFn returns the list of partitions for the user defined source.
        pub async fn partitions_fn(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::PartitionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/source.v1.Source/PartitionsFn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("source.v1.Source", "PartitionsFn"));
            self.inner.unary(req, path, codec).await
        }
        /// IsReady is the heartbeat endpoint for user defined source gRPC.
        pub async fn is_ready(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<tonic::Response<super::ReadyResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/source.v1.Source/IsReady");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("source.v1.Source", "IsReady"));
            self.inner.unary(req, path, codec).await
        }
    }
}
