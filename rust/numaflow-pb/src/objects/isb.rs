// This file is @generated by prost-build.
/// MessageInfo is the message information window of the payload.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MessageInfo {
    /// EventTime represents the event time of the message
    #[prost(message, optional, tag = "1")]
    pub event_time: ::core::option::Option<::prost_types::Timestamp>,
    /// IsLate is used to indicate if the message is a late data
    #[prost(bool, tag = "2")]
    pub is_late: bool,
}
/// MessageMetadata is the metadata of the message
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MessageMetadata {
    /// NumDelivered is the number of times the message has been delivered.
    #[prost(uint64, tag = "1")]
    pub num_delivered: u64,
}
/// Header is the header of the message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Header {
    /// MessageInfo contains the information window of the payload.
    #[prost(message, optional, tag = "1")]
    pub message_info: ::core::option::Option<MessageInfo>,
    /// Kind indicates the kind of Message
    #[prost(enumeration = "MessageKind", tag = "2")]
    pub kind: i32,
    /// ID is used for exactly-once-semantics. ID is a combination of vertex name, offset and index of the message.
    #[prost(message, optional, tag = "3")]
    pub id: ::core::option::Option<MessageId>,
    /// Keys is (key,value) in the map-reduce paradigm will be used for reduce operation
    #[prost(string, repeated, tag = "4")]
    pub keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Headers is the headers of the message which can be used to store and propagate source headers
    #[prost(map = "string, string", tag = "5")]
    pub headers: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// MessageID is the message ID of the message which is used for exactly-once-semantics.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageId {
    /// VertexName is the name of the vertex
    #[prost(string, tag = "1")]
    pub vertex_name: ::prost::alloc::string::String,
    /// Offset is the offset of the message
    #[prost(string, tag = "2")]
    pub offset: ::prost::alloc::string::String,
    /// Index is the index of a flatmap message.
    #[prost(int32, tag = "3")]
    pub index: i32,
}
/// Body is the body of the message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Body {
    /// Payload is the actual data of the message
    #[prost(bytes = "vec", tag = "1")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
/// Message is inter step message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<Header>,
    #[prost(message, optional, tag = "2")]
    pub body: ::core::option::Option<Body>,
}
/// ReadMessage is the message read from the buffer.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadMessage {
    /// Message is the actual message read from the buffer
    #[prost(message, optional, tag = "1")]
    pub message: ::core::option::Option<Message>,
    /// ReadOffset is the offset at which the message was read
    #[prost(string, tag = "2")]
    pub read_offset: ::prost::alloc::string::String,
    /// Watermark is the watermark timestamp
    #[prost(message, optional, tag = "3")]
    pub watermark: ::core::option::Option<::prost_types::Timestamp>,
    /// Metadata is the metadata of the message after a message is read from the buffer.
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<MessageMetadata>,
}
/// WriteMessage is a wrapper for an isb message with tag information which will be used for conditional forwarding.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteMessage {
    /// Message is the actual message to be written
    #[prost(message, optional, tag = "1")]
    pub message: ::core::option::Option<Message>,
    /// Tags are the tags associated with the message
    #[prost(string, repeated, tag = "2")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// MessageKind represents the message type of the payload.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageKind {
    /// Data payload
    Data = 0,
    /// Watermark Barrier
    Wmb = 1,
}
impl MessageKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Data => "DATA",
            Self::Wmb => "WMB",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DATA" => Some(Self::Data),
            "WMB" => Some(Self::Wmb),
            _ => None,
        }
    }
}
