/*
Copyright 2022 The Numaproj Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Openapi Generator. DO NOT EDIT.

/// RateLimiterModes : RateLimiterModes defines the modes for rate limiting.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RateLimiterModes {
    #[serde(rename = "goBackN", skip_serializing_if = "Option::is_none")]
    pub go_back_n: Option<Box<crate::models::RateLimiterGoBackN>>,
    #[serde(rename = "onlyIfUsed", skip_serializing_if = "Option::is_none")]
    pub only_if_used: Option<Box<crate::models::RateLimiterOnlyIfUsed>>,
    #[serde(rename = "relaxed", skip_serializing_if = "Option::is_none")]
    pub relaxed: Option<Box<crate::models::RateLimiterRelaxed>>,
    #[serde(rename = "scheduled", skip_serializing_if = "Option::is_none")]
    pub scheduled: Option<Box<crate::models::RateLimiterScheduled>>,
}

impl RateLimiterModes {
    /// RateLimiterModes defines the modes for rate limiting.
    pub fn new() -> RateLimiterModes {
        RateLimiterModes {
            go_back_n: None,
            only_if_used: None,
            relaxed: None,
            scheduled: None,
        }
    }
}
