/*
Copyright 2022 The Numaproj Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Openapi Generator. DO NOT EDIT.

/// Backoff : Backoff defines parameters used to systematically configure the retry strategy.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Backoff {
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<kube::core::Duration>,
    #[serde(rename = "maxInterval", skip_serializing_if = "Option::is_none")]
    pub max_interval: Option<kube::core::Duration>,
    /// MaxRetryAttempts defines the maximum number of retry attempts
    #[serde(rename = "maxRetryAttempts", skip_serializing_if = "Option::is_none")]
    pub max_retry_attempts: Option<i64>,
    /// Multiplier specifies the factor by which the retry interval increases after each attempt. For example, a multiplier of \"2.0\" doubles the interval after each retry.
    #[serde(rename = "multiplier", skip_serializing_if = "Option::is_none")]
    pub multiplier: Option<String>,
}

impl Backoff {
    /// Backoff defines parameters used to systematically configure the retry strategy.
    pub fn new() -> Backoff {
        Backoff {
            interval: None,
            max_interval: None,
            max_retry_attempts: None,
            multiplier: None,
        }
    }
}
