// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: pkg/apis/proto/source/v1/source.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourceClient is the client API for Source service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceClient interface {
	// Read returns a stream of datum responses.
	// The size of the returned ReadResponse is less than or equal to the num_records specified in ReadRequest.
	// If the request timeout is reached on server side, the returned ReadResponse will contain all the datum that have been read (which could be an empty list).
	ReadFn(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Source_ReadFnClient, error)
	// AckFn acknowledges a list of datum offsets.
	// When AckFn is called, it implicitly indicates that the datum stream has been processed by the source vertex.
	// The caller (numa) expects the AckFn to be successful, and it does not expect any errors.
	// If there are some irrecoverable errors when the callee (UDSource) is processing the AckFn request,
	// then it is best to crash because there are no other retry mechanisms possible.
	AckFn(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
	// PendingFn returns the number of pending records at the user defined source.
	PendingFn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PendingResponse, error)
	// PartitionsFn returns the list of partitions for the user defined source.
	PartitionsFn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PartitionsResponse, error)
	// IsReady is the heartbeat endpoint for user defined source gRPC.
	IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type sourceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceClient(cc grpc.ClientConnInterface) SourceClient {
	return &sourceClient{cc}
}

func (c *sourceClient) ReadFn(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Source_ReadFnClient, error) {
	stream, err := c.cc.NewStream(ctx, &Source_ServiceDesc.Streams[0], "/source.v1.Source/ReadFn", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceReadFnClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Source_ReadFnClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type sourceReadFnClient struct {
	grpc.ClientStream
}

func (x *sourceReadFnClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sourceClient) AckFn(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/source.v1.Source/AckFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) PendingFn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PendingResponse, error) {
	out := new(PendingResponse)
	err := c.cc.Invoke(ctx, "/source.v1.Source/PendingFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) PartitionsFn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PartitionsResponse, error) {
	out := new(PartitionsResponse)
	err := c.cc.Invoke(ctx, "/source.v1.Source/PartitionsFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, "/source.v1.Source/IsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServer is the server API for Source service.
// All implementations must embed UnimplementedSourceServer
// for forward compatibility
type SourceServer interface {
	// Read returns a stream of datum responses.
	// The size of the returned ReadResponse is less than or equal to the num_records specified in ReadRequest.
	// If the request timeout is reached on server side, the returned ReadResponse will contain all the datum that have been read (which could be an empty list).
	ReadFn(*ReadRequest, Source_ReadFnServer) error
	// AckFn acknowledges a list of datum offsets.
	// When AckFn is called, it implicitly indicates that the datum stream has been processed by the source vertex.
	// The caller (numa) expects the AckFn to be successful, and it does not expect any errors.
	// If there are some irrecoverable errors when the callee (UDSource) is processing the AckFn request,
	// then it is best to crash because there are no other retry mechanisms possible.
	AckFn(context.Context, *AckRequest) (*AckResponse, error)
	// PendingFn returns the number of pending records at the user defined source.
	PendingFn(context.Context, *emptypb.Empty) (*PendingResponse, error)
	// PartitionsFn returns the list of partitions for the user defined source.
	PartitionsFn(context.Context, *emptypb.Empty) (*PartitionsResponse, error)
	// IsReady is the heartbeat endpoint for user defined source gRPC.
	IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error)
	mustEmbedUnimplementedSourceServer()
}

// UnimplementedSourceServer must be embedded to have forward compatible implementations.
type UnimplementedSourceServer struct {
}

func (UnimplementedSourceServer) ReadFn(*ReadRequest, Source_ReadFnServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFn not implemented")
}
func (UnimplementedSourceServer) AckFn(context.Context, *AckRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckFn not implemented")
}
func (UnimplementedSourceServer) PendingFn(context.Context, *emptypb.Empty) (*PendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingFn not implemented")
}
func (UnimplementedSourceServer) PartitionsFn(context.Context, *emptypb.Empty) (*PartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionsFn not implemented")
}
func (UnimplementedSourceServer) IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}
func (UnimplementedSourceServer) mustEmbedUnimplementedSourceServer() {}

// UnsafeSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceServer will
// result in compilation errors.
type UnsafeSourceServer interface {
	mustEmbedUnimplementedSourceServer()
}

func RegisterSourceServer(s grpc.ServiceRegistrar, srv SourceServer) {
	s.RegisterService(&Source_ServiceDesc, srv)
}

func _Source_ReadFn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SourceServer).ReadFn(m, &sourceReadFnServer{stream})
}

type Source_ReadFnServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type sourceReadFnServer struct {
	grpc.ServerStream
}

func (x *sourceReadFnServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Source_AckFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).AckFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.v1.Source/AckFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).AckFn(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_PendingFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).PendingFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.v1.Source/PendingFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).PendingFn(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_PartitionsFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).PartitionsFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.v1.Source/PartitionsFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).PartitionsFn(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.v1.Source/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).IsReady(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Source_ServiceDesc is the grpc.ServiceDesc for Source service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Source_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "source.v1.Source",
	HandlerType: (*SourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckFn",
			Handler:    _Source_AckFn_Handler,
		},
		{
			MethodName: "PendingFn",
			Handler:    _Source_PendingFn_Handler,
		},
		{
			MethodName: "PartitionsFn",
			Handler:    _Source_PartitionsFn_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _Source_IsReady_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadFn",
			Handler:       _Source_ReadFn_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/apis/proto/source/v1/source.proto",
}
