// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/mapstream/v1 (interfaces: MapStreamClient,MapStream_MapStreamFnClient)

// Package mapstreammock is a generated GoMock package.
package mapstreammock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/mapstream/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMapStreamClient is a mock of MapStreamClient interface.
type MockMapStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockMapStreamClientMockRecorder
}

// MockMapStreamClientMockRecorder is the mock recorder for MockMapStreamClient.
type MockMapStreamClientMockRecorder struct {
	mock *MockMapStreamClient
}

// NewMockMapStreamClient creates a new mock instance.
func NewMockMapStreamClient(ctrl *gomock.Controller) *MockMapStreamClient {
	mock := &MockMapStreamClient{ctrl: ctrl}
	mock.recorder = &MockMapStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapStreamClient) EXPECT() *MockMapStreamClientMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockMapStreamClient) IsReady(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockMapStreamClientMockRecorder) IsReady(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockMapStreamClient)(nil).IsReady), varargs...)
}

// MapStreamFn mocks base method.
func (m *MockMapStreamClient) MapStreamFn(arg0 context.Context, arg1 *v1.MapStreamRequest, arg2 ...grpc.CallOption) (v1.MapStream_MapStreamFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MapStreamFn", varargs...)
	ret0, _ := ret[0].(v1.MapStream_MapStreamFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapStreamFn indicates an expected call of MapStreamFn.
func (mr *MockMapStreamClientMockRecorder) MapStreamFn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapStreamFn", reflect.TypeOf((*MockMapStreamClient)(nil).MapStreamFn), varargs...)
}

// MockMapStream_MapStreamFnClient is a mock of MapStream_MapStreamFnClient interface.
type MockMapStream_MapStreamFnClient struct {
	ctrl     *gomock.Controller
	recorder *MockMapStream_MapStreamFnClientMockRecorder
}

// MockMapStream_MapStreamFnClientMockRecorder is the mock recorder for MockMapStream_MapStreamFnClient.
type MockMapStream_MapStreamFnClientMockRecorder struct {
	mock *MockMapStream_MapStreamFnClient
}

// NewMockMapStream_MapStreamFnClient creates a new mock instance.
func NewMockMapStream_MapStreamFnClient(ctrl *gomock.Controller) *MockMapStream_MapStreamFnClient {
	mock := &MockMapStream_MapStreamFnClient{ctrl: ctrl}
	mock.recorder = &MockMapStream_MapStreamFnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapStream_MapStreamFnClient) EXPECT() *MockMapStream_MapStreamFnClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMapStream_MapStreamFnClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMapStream_MapStreamFnClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMapStream_MapStreamFnClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMapStream_MapStreamFnClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMapStream_MapStreamFnClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMapStream_MapStreamFnClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMapStream_MapStreamFnClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMapStream_MapStreamFnClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMapStream_MapStreamFnClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMapStream_MapStreamFnClient) Recv() (*v1.MapStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.MapStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMapStream_MapStreamFnClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMapStream_MapStreamFnClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockMapStream_MapStreamFnClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMapStream_MapStreamFnClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMapStream_MapStreamFnClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockMapStream_MapStreamFnClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMapStream_MapStreamFnClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMapStream_MapStreamFnClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockMapStream_MapStreamFnClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMapStream_MapStreamFnClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMapStream_MapStreamFnClient)(nil).Trailer))
}
