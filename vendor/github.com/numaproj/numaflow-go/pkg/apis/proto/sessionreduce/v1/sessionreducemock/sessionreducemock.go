// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/sessionreduce/v1 (interfaces: SessionReduceClient,SessionReduce_SessionReduceFnClient)

// Package sessionreducemock is a generated GoMock package.
package sessionreducemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/sessionreduce/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSessionReduceClient is a mock of SessionReduceClient interface.
type MockSessionReduceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionReduceClientMockRecorder
}

// MockSessionReduceClientMockRecorder is the mock recorder for MockSessionReduceClient.
type MockSessionReduceClientMockRecorder struct {
	mock *MockSessionReduceClient
}

// NewMockSessionReduceClient creates a new mock instance.
func NewMockSessionReduceClient(ctrl *gomock.Controller) *MockSessionReduceClient {
	mock := &MockSessionReduceClient{ctrl: ctrl}
	mock.recorder = &MockSessionReduceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionReduceClient) EXPECT() *MockSessionReduceClientMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockSessionReduceClient) IsReady(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockSessionReduceClientMockRecorder) IsReady(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockSessionReduceClient)(nil).IsReady), varargs...)
}

// SessionReduceFn mocks base method.
func (m *MockSessionReduceClient) SessionReduceFn(arg0 context.Context, arg1 ...grpc.CallOption) (v1.SessionReduce_SessionReduceFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SessionReduceFn", varargs...)
	ret0, _ := ret[0].(v1.SessionReduce_SessionReduceFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionReduceFn indicates an expected call of SessionReduceFn.
func (mr *MockSessionReduceClientMockRecorder) SessionReduceFn(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionReduceFn", reflect.TypeOf((*MockSessionReduceClient)(nil).SessionReduceFn), varargs...)
}

// MockSessionReduce_SessionReduceFnClient is a mock of SessionReduce_SessionReduceFnClient interface.
type MockSessionReduce_SessionReduceFnClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionReduce_SessionReduceFnClientMockRecorder
}

// MockSessionReduce_SessionReduceFnClientMockRecorder is the mock recorder for MockSessionReduce_SessionReduceFnClient.
type MockSessionReduce_SessionReduceFnClientMockRecorder struct {
	mock *MockSessionReduce_SessionReduceFnClient
}

// NewMockSessionReduce_SessionReduceFnClient creates a new mock instance.
func NewMockSessionReduce_SessionReduceFnClient(ctrl *gomock.Controller) *MockSessionReduce_SessionReduceFnClient {
	mock := &MockSessionReduce_SessionReduceFnClient{ctrl: ctrl}
	mock.recorder = &MockSessionReduce_SessionReduceFnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionReduce_SessionReduceFnClient) EXPECT() *MockSessionReduce_SessionReduceFnClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSessionReduce_SessionReduceFnClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSessionReduce_SessionReduceFnClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSessionReduce_SessionReduceFnClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSessionReduce_SessionReduceFnClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSessionReduce_SessionReduceFnClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSessionReduce_SessionReduceFnClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSessionReduce_SessionReduceFnClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSessionReduce_SessionReduceFnClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSessionReduce_SessionReduceFnClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSessionReduce_SessionReduceFnClient) Recv() (*v1.SessionReduceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.SessionReduceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSessionReduce_SessionReduceFnClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSessionReduce_SessionReduceFnClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockSessionReduce_SessionReduceFnClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSessionReduce_SessionReduceFnClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSessionReduce_SessionReduceFnClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockSessionReduce_SessionReduceFnClient) Send(arg0 *v1.SessionReduceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSessionReduce_SessionReduceFnClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSessionReduce_SessionReduceFnClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockSessionReduce_SessionReduceFnClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSessionReduce_SessionReduceFnClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSessionReduce_SessionReduceFnClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockSessionReduce_SessionReduceFnClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSessionReduce_SessionReduceFnClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSessionReduce_SessionReduceFnClient)(nil).Trailer))
}
