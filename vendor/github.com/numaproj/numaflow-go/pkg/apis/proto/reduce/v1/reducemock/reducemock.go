// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/reduce/v1 (interfaces: ReduceClient,Reduce_ReduceFnClient)

// Package reducemock is a generated GoMock package.
package reducemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/reduce/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockReduceClient is a mock of ReduceClient interface.
type MockReduceClient struct {
	ctrl     *gomock.Controller
	recorder *MockReduceClientMockRecorder
}

// MockReduceClientMockRecorder is the mock recorder for MockReduceClient.
type MockReduceClientMockRecorder struct {
	mock *MockReduceClient
}

// NewMockReduceClient creates a new mock instance.
func NewMockReduceClient(ctrl *gomock.Controller) *MockReduceClient {
	mock := &MockReduceClient{ctrl: ctrl}
	mock.recorder = &MockReduceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReduceClient) EXPECT() *MockReduceClientMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockReduceClient) IsReady(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockReduceClientMockRecorder) IsReady(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockReduceClient)(nil).IsReady), varargs...)
}

// ReduceFn mocks base method.
func (m *MockReduceClient) ReduceFn(arg0 context.Context, arg1 ...grpc.CallOption) (v1.Reduce_ReduceFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReduceFn", varargs...)
	ret0, _ := ret[0].(v1.Reduce_ReduceFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReduceFn indicates an expected call of ReduceFn.
func (mr *MockReduceClientMockRecorder) ReduceFn(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceFn", reflect.TypeOf((*MockReduceClient)(nil).ReduceFn), varargs...)
}

// MockReduce_ReduceFnClient is a mock of Reduce_ReduceFnClient interface.
type MockReduce_ReduceFnClient struct {
	ctrl     *gomock.Controller
	recorder *MockReduce_ReduceFnClientMockRecorder
}

// MockReduce_ReduceFnClientMockRecorder is the mock recorder for MockReduce_ReduceFnClient.
type MockReduce_ReduceFnClientMockRecorder struct {
	mock *MockReduce_ReduceFnClient
}

// NewMockReduce_ReduceFnClient creates a new mock instance.
func NewMockReduce_ReduceFnClient(ctrl *gomock.Controller) *MockReduce_ReduceFnClient {
	mock := &MockReduce_ReduceFnClient{ctrl: ctrl}
	mock.recorder = &MockReduce_ReduceFnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReduce_ReduceFnClient) EXPECT() *MockReduce_ReduceFnClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockReduce_ReduceFnClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockReduce_ReduceFnClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockReduce_ReduceFnClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockReduce_ReduceFnClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockReduce_ReduceFnClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReduce_ReduceFnClient)(nil).Context))
}

// Header mocks base method.
func (m *MockReduce_ReduceFnClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockReduce_ReduceFnClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockReduce_ReduceFnClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockReduce_ReduceFnClient) Recv() (*v1.ReduceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.ReduceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockReduce_ReduceFnClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockReduce_ReduceFnClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockReduce_ReduceFnClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockReduce_ReduceFnClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReduce_ReduceFnClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockReduce_ReduceFnClient) Send(arg0 *v1.ReduceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockReduce_ReduceFnClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReduce_ReduceFnClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockReduce_ReduceFnClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockReduce_ReduceFnClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReduce_ReduceFnClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockReduce_ReduceFnClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockReduce_ReduceFnClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockReduce_ReduceFnClient)(nil).Trailer))
}
