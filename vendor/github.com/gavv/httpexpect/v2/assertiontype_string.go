// Code generated by "stringer -type=AssertionType"; DO NOT EDIT.

package httpexpect

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AssertUsage-0]
	_ = x[AssertOperation-1]
	_ = x[AssertType-2]
	_ = x[AssertNotType-3]
	_ = x[AssertValid-4]
	_ = x[AssertNotValid-5]
	_ = x[AssertNil-6]
	_ = x[AssertNotNil-7]
	_ = x[AssertEmpty-8]
	_ = x[AssertNotEmpty-9]
	_ = x[AssertEqual-10]
	_ = x[AssertNotEqual-11]
	_ = x[AssertLt-12]
	_ = x[AssertLe-13]
	_ = x[AssertGt-14]
	_ = x[AssertGe-15]
	_ = x[AssertInRange-16]
	_ = x[AssertNotInRange-17]
	_ = x[AssertMatchSchema-18]
	_ = x[AssertNotMatchSchema-19]
	_ = x[AssertMatchPath-20]
	_ = x[AssertNotMatchPath-21]
	_ = x[AssertMatchRegexp-22]
	_ = x[AssertNotMatchRegexp-23]
	_ = x[AssertMatchFormat-24]
	_ = x[AssertNotMatchFormat-25]
	_ = x[AssertContainsKey-26]
	_ = x[AssertNotContainsKey-27]
	_ = x[AssertContainsElement-28]
	_ = x[AssertNotContainsElement-29]
	_ = x[AssertContainsSubset-30]
	_ = x[AssertNotContainsSubset-31]
	_ = x[AssertBelongs-32]
	_ = x[AssertNotBelongs-33]
}

const _AssertionType_name = "AssertUsageAssertOperationAssertTypeAssertNotTypeAssertValidAssertNotValidAssertNilAssertNotNilAssertEmptyAssertNotEmptyAssertEqualAssertNotEqualAssertLtAssertLeAssertGtAssertGeAssertInRangeAssertNotInRangeAssertMatchSchemaAssertNotMatchSchemaAssertMatchPathAssertNotMatchPathAssertMatchRegexpAssertNotMatchRegexpAssertMatchFormatAssertNotMatchFormatAssertContainsKeyAssertNotContainsKeyAssertContainsElementAssertNotContainsElementAssertContainsSubsetAssertNotContainsSubsetAssertBelongsAssertNotBelongs"

var _AssertionType_index = [...]uint16{0, 11, 26, 36, 49, 60, 74, 83, 95, 106, 120, 131, 145, 153, 161, 169, 177, 190, 206, 223, 243, 258, 276, 293, 313, 330, 350, 367, 387, 408, 432, 452, 475, 488, 504}

func (i AssertionType) String() string {
	if i >= AssertionType(len(_AssertionType_index)-1) {
		return "AssertionType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AssertionType_name[_AssertionType_index[i]:_AssertionType_index[i+1]]
}
