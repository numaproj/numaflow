apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: numaflow-role
  namespace: numaflow-system
rules:
- apiGroups:
  - numaflow.numaproj.io
  resources:
  - interstepbufferservices
  - interstepbufferservices/finalizers
  - interstepbufferservices/status
  - pipelines
  - pipelines/finalizers
  - pipelines/status
  - vertices
  - vertices/finalizers
  - vertices/status
  - vertices/scale
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - configmaps
  - secrets
  - services
  - persistentvolumeclaims
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  - statefulsets
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: numaflow-role-binding
  namespace: numaflow-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: numaflow-role
subjects:
- kind: ServiceAccount
  name: numaflow-sa
---
apiVersion: v1
data:
  controller-config.yaml: |
    isbsvc:
      redis:
        # Default Redis settings, could be overridden by InterStepBufferService specs
        settings:
          # Redis config shared by both master and replicas
          redis: |
            min-replicas-to-write 1
            # Disable RDB persistence, AOF persistence already enabled.
            save ""
            maxmemory 512mb
            maxmemory-policy allkeys-lru
          # Special config only used by master
          master: |
            appendonly no
          # Special config only used by replicas
          replica: |
            # Enable AOF https://redis.io/topics/persistence#append-only-file
            appendonly yes
            auto-aof-rewrite-percentage 100
            auto-aof-rewrite-min-size 64mb
          # Sentinel config
          sentinel: |
            sentinel down-after-milliseconds mymaster 10000
            sentinel failover-timeout mymaster 2000
            sentinel parallel-syncs mymaster 1
        versions:
        - version: 6.2.6
          redisImage: bitnami/redis:6.2.6-debian-10-r97
          sentinelImage: bitnami/redis-sentinel:6.2.6-debian-10-r95
          redisExporterImage: bitnami/redis-exporter:1.33.0-debian-10-r21
          initContainerImage: debian:latest
      jetstream:
        # Default JetStream settings, could be overridden by InterStepBufferService specs
        settings: |
          # https://docs.nats.io/running-a-nats-service/configuration#jetstream
          # Only configure "max_memory_store" or "max_file_store", do not set "store_dir" as it has been hardcoded.
          # e.g. 1G. -1 means no limit, up to 75% of available memory. This only take effect for streams created using memory storage.
          max_memory_store: -1
          # e.g. 20G. -1 means no limit, Up to 1TB if available
          max_file_store: 1TB
        bufferConfig: |
          # The default properties of the buffers (streams) to be created in this JetStream service
          stream:
            # 0: Limits, 1: Interest, 2: WorkQueue
            retention: 0
            maxMsgs: 2000000
            maxAge: 168h
            maxBytes: -1
            replicas: 3
            duplicates: 60s
          # The default consumer properties for the created streams
          consumer:
            ackWait: 60s
            maxAckPending: 20000
          otBucket:
            maxValueSize: 0
            history: 1
            ttl: 3h
            maxBytes: 0
            replicas: 3
          procBucket:
            maxValueSize: 0
            history: 1
            ttl: 72h
            maxBytes: 0
            replicas: 3
        versions:
        - version: latest
          natsImage: nats:2.9.0
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: /nats-server
        - version: 2.8.1
          natsImage: nats:2.8.1
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: /nats-server
        - version: 2.8.1-alpine
          natsImage: nats:2.8.1-alpine
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: nats-server
        - version: 2.8.3
          natsImage: nats:2.8.3
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: /nats-server
        - version: 2.8.3-alpine
          natsImage: nats:2.8.3-alpine
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: nats-server
        - version: 2.9.0
          natsImage: nats:2.9.0
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: /nats-server
        - version: 2.9.0-alpine
          natsImage: nats:2.9.0-alpine
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: nats-server
kind: ConfigMap
metadata:
  name: numaflow-controller-config
  namespace: numaflow-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: numaflow-controller
  namespace: numaflow-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: controller-manager
      app.kubernetes.io/part-of: numaflow
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller-manager
        app.kubernetes.io/part-of: numaflow
    spec:
      containers:
      - args:
        - controller
        - --namespaced
        env:
        - name: NUMAFLOW_IMAGE
          value: quay.io/numaproj/numaflow:latest
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/numaproj/numaflow:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        name: controller-manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        resources:
          limits:
            cpu: 500m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - mountPath: /etc/numaflow
          name: controller-config-volume
      securityContext:
        runAsNonRoot: true
        runAsUser: 9737
      serviceAccountName: numaflow-sa
      volumes:
      - configMap:
          name: numaflow-controller-config
        name: controller-config-volume
