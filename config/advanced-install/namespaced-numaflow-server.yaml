apiVersion: v1
kind: ServiceAccount
metadata:
  name: numaflow-server-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: numaflow-ux
    app.kubernetes.io/name: numaflow-ux
    app.kubernetes.io/part-of: numaflow
  name: numaflow-server-role
rules:
- apiGroups:
  - numaflow.numaproj.io
  resources:
  - interstepbufferservices
  - interstepbufferservices/finalizers
  - interstepbufferservices/status
  - pipelines
  - pipelines/finalizers
  - pipelines/status
  - vertices
  - vertices/finalizers
  - vertices/status
  - vertices/scale
  - monovertices
  - monovertices/finalizers
  - monovertices/status
  - monovertices/scale
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  - pods
  - pods/log
  - configmaps
  - services
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: numaflow-ux
    app.kubernetes.io/name: numaflow-ux
    app.kubernetes.io/part-of: numaflow
  name: numaflow-server-secrets-role
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: numaflow-ux
    app.kubernetes.io/name: numaflow-ux
    app.kubernetes.io/part-of: numaflow
  name: numaflow-server-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: numaflow-server-role
subjects:
- kind: ServiceAccount
  name: numaflow-server-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: numaflow-ux
    app.kubernetes.io/name: numaflow-ux
    app.kubernetes.io/part-of: numaflow
  name: numaflow-server-secrets-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: numaflow-server-secrets-role
subjects:
- kind: ServiceAccount
  name: numaflow-server-sa
---
apiVersion: v1
data:
  namespaced: "true"
  server.disable.auth: "true"
kind: ConfigMap
metadata:
  name: numaflow-cmd-params-config
---
apiVersion: v1
data:
  admin.enabled: "true"
kind: ConfigMap
metadata:
  name: numaflow-server-local-user-config
---
apiVersion: v1
data:
  config.yaml: "# url is a required field, it should be the url of the service to
    which the metrics proxy will connect\n# url: service_name + \".\" + service_namespace
    + \".svc.cluster.local\" + \":\" + port\n# example for local prometheus service\n#
    url: http://prometheus-operated.monitoring.svc.cluster.local:9090\npatterns:\n-
    name: vertex_gauge\n  object: vertex\n  title: Vertex Pending Messages\n  description:
    This query is the total number of pending messages for the vertex\n  expr: |\n
    \   sum($metric_name{$filters}) by ($dimension, period)\n  params:\n    - name:
    start_time\n      required: false\n    - name: end_time\n      required: false\n
    \ metrics:\n    - metric_name: vertex_pending_messages\n      display_name: Vertex
    Pending Messages\n      metric_description: This gauge metric keeps track of the
    total number of messages that are waiting to be processed over varying time frames
    of 1min, 5min, 15min and default period of 2min. \n      # set \"Units\" or unset
    for default behaviour\n      # unit: Units\n      required_filters:\n        -
    namespace\n        - pipeline\n        - vertex\n      dimensions:\n        -
    name: pod\n          # expr: optional expression for prometheus query\n          #
    overrides the default expression\n          filters:\n            - name: pod\n
    \             required: false\n            - name: period\n              required:
    false\n        - name: vertex\n          # expr: optional expression for prometheus
    query\n          # overrides the default expression\n          filters:\n            -
    name: period\n              required: false\n\n- name: mono_vertex_gauge\n  object:
    mono-vertex\n  title: Pending Messages Lag\n  description: This query is the total
    number of pending messages for the mono vertex\n  expr: |\n    sum($metric_name{$filters})
    by ($dimension, period)\n  params:\n    - name: start_time\n      required: false\n
    \   - name: end_time\n      required: false\n  metrics:\n    - metric_name: monovtx_pending\n
    \     display_name: MonoVertex Pending Messages\n      metric_description: This
    gauge metric keeps track of the total number of messages that are waiting to be
    processed over varying time frames of 1min, 5min, 15min and default period of
    2min. \n      # set \"Units\" or unset for default behaviour\n      # unit: Units\n
    \     required_filters:\n        - namespace\n        - mvtx_name\n      dimensions:\n
    \       - name: pod\n          # expr: optional expression for prometheus query\n
    \         # overrides the default expression\n          filters:\n            -
    name: pod\n              required: false\n            - name: period\n              required:
    false\n        - name: mono-vertex\n          # expr: optional expression for
    prometheus query\n          # overrides the default expression\n          filters:\n
    \           - name: period\n              required: false\n\n- name: mono_vertex_histogram\n
    \ object: mono-vertex\n  title: Processing Time Latency\n  description: This query
    pattern is for P99,P90 and P50 quantiles for a mono-vertex across different dimensions\n
    \ expr: |\n    histogram_quantile($quantile, sum by($dimension,le) (rate($metric_name{$filters}[$duration])))\n
    \ params:\n    - name: quantile\n      required: true\n    - name: duration\n
    \     required: true\n    - name: start_time\n      required: false\n    - name:
    end_time\n      required: false\n  metrics:\n    - metric_name: monovtx_processing_time_bucket\n
    \     display_name: MonoVertex Processing Time Latency\n      metric_description:
    This metric represents a histogram to keep track of the total time taken to forward
    a chunk of messages.\n      # set \"Units\" or unset for default behaviour otherwise
    set \"s\" or \"ms\" for latency metrics\n      # Note: latency values are in μs\n
    \     # unit: s\n      required_filters:\n        - namespace\n        - mvtx_name\n
    \     dimensions:\n        - name: mono-vertex\n        - name: pod\n          filters:\n
    \           - name: pod\n              required: false\n    - metric_name: monovtx_sink_time_bucket\n
    \     display_name: MonoVertex Sink Write Time Latency\n      metric_description:
    This metric represents a histogram to keep track of the total time taken to write
    to the Sink.\n      # set \"Units\" or unset for default behaviour otherwise set
    \"s\" or \"ms\" for latency metrics\n      # Note: latency values are in μs\n
    \     # unit: ms\n      required_filters:\n        - namespace\n        - mvtx_name\n
    \     dimensions:\n        - name: mono-vertex\n        - name: pod\n          filters:\n
    \           - name: pod\n              required: false\n\n- name: vertex_throughput\n
    \ object: vertex\n  title: Vertex Throughput and Message Rates\n  description:
    This pattern measures the throughput of a vertex in messages per second across
    different dimensions\n  expr: sum(rate($metric_name{$filters}[$duration])) by
    ($dimension)\n  params:\n    - name: duration\n      required: true\n    - name:
    start_time\n      required: false\n    - name: end_time\n      required: false\n
    \ metrics:\n    - metric_name: forwarder_data_read_total\n      display_name:
    Vertex Read Processing Rate\n      metric_description: This metric represents
    the total number of data messages read per second.\n      # set \"Units\" or unset
    for default behaviour\n      # unit: Units\n      required_filters:\n        -
    namespace\n        - pipeline\n        - vertex\n      dimensions:\n        -
    name: vertex\n        - name: pod\n          filters:\n            - name: pod\n
    \             required: false\n\n- name: mono_vertex_throughput\n  object: mono-vertex\n
    \ title: MonoVertex Throughput and Message Rates\n  description: This pattern
    measures the throughput of a MonoVertex in messages per second across different
    dimensions.\n  expr: sum(rate($metric_name{$filters}[$duration])) by ($dimension)\n
    \ params:\n    - name: duration\n      required: true\n    - name: start_time\n
    \     required: false\n    - name: end_time\n      required: false\n  metrics:\n
    \   - metric_name: monovtx_read_total\n      display_name: MonoVertex Read Processing
    Rate\n      metric_description: This metric represents the total number of data
    messages read per second.\n      # set \"Units\" or unset for default behaviour\n
    \     # unit: Units\n      required_filters:\n        - namespace\n        - mvtx_name\n
    \     dimensions:\n        - name: mono-vertex\n        - name: pod\n          filters:\n
    \           - name: pod\n              required: false"
kind: ConfigMap
metadata:
  name: numaflow-server-metrics-proxy-config
---
apiVersion: v1
data:
  rbac-conf.yaml: |
    policy.default: role:readonly
    # The scopes field controls which authentication scopes to examine during rbac enforcement.
    # We can have multiple scopes, and the first scope that matches with the policy will be used.
    # The default value is "groups", which means that the groups field of the user's token will be examined
    # The other possible value is "email", which means that the email field of the user's token will be examined
    # It can be provided as a comma-separated list, e.g "groups,email,username"
    policy.scopes: groups,email,username
  rbac-policy.csv: |
    # Policies go here
    p, role:admin, *, *, *
    p, role:readonly, *, *, GET
    # Groups go here
    # g, admin, role:admin
    # g, my-github-org:my-github-team, role:readonly
kind: ConfigMap
metadata:
  name: numaflow-server-rbac-config
---
apiVersion: v1
kind: Secret
metadata:
  name: numaflow-server-secrets
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: numaflow-server
spec:
  ports:
  - port: 8443
    targetPort: 8443
  selector:
    app.kubernetes.io/component: numaflow-ux
    app.kubernetes.io/name: numaflow-ux
    app.kubernetes.io/part-of: numaflow
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: numaflow-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: numaflow-ux
      app.kubernetes.io/name: numaflow-ux
      app.kubernetes.io/part-of: numaflow
  template:
    metadata:
      labels:
        app.kubernetes.io/component: numaflow-ux
        app.kubernetes.io/name: numaflow-ux
        app.kubernetes.io/part-of: numaflow
    spec:
      containers:
      - args:
        - server
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NUMAFLOW_SERVER_INSECURE
          valueFrom:
            configMapKeyRef:
              key: server.insecure
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_PORT_NUMBER
          valueFrom:
            configMapKeyRef:
              key: server.port
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_NAMESPACED
          valueFrom:
            configMapKeyRef:
              key: namespaced
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_MANAGED_NAMESPACE
          valueFrom:
            configMapKeyRef:
              key: managed.namespace
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_BASE_HREF
          valueFrom:
            configMapKeyRef:
              key: server.base.href
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_READONLY
          valueFrom:
            configMapKeyRef:
              key: server.readonly
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_DISABLE_AUTH
          valueFrom:
            configMapKeyRef:
              key: server.disable.auth
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_DEX_SERVER_ADDR
          valueFrom:
            configMapKeyRef:
              key: server.dex.server
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_ADDRESS
          valueFrom:
            configMapKeyRef:
              key: server.address
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_CORS_ALLOWED_ORIGINS
          valueFrom:
            configMapKeyRef:
              key: server.cors.allowed.origins
              name: numaflow-cmd-params-config
              optional: true
        - name: NUMAFLOW_SERVER_DAEMON_CLIENT_PROTOCOL
          valueFrom:
            configMapKeyRef:
              key: server.daemon.client.protocol
              name: numaflow-cmd-params-config
              optional: true
        image: quay.io/numaproj/numaflow:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /livez
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 3
          periodSeconds: 3
        name: main
        resources:
          limits:
            cpu: 500m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - mountPath: /ui/build/runtime-env.js
          name: env-volume
          subPath: runtime-env.js
        - mountPath: /ui/build/index.html
          name: env-volume
          subPath: index.html
        - mountPath: /etc/numaflow
          name: rbac-config
        - mountPath: /etc/numaflow/metrics-proxy
          name: metrics-proxy-config
      initContainers:
      - args:
        - server-init
        env:
        - name: NUMAFLOW_SERVER_BASE_HREF
          valueFrom:
            configMapKeyRef:
              key: server.base.href
              name: numaflow-cmd-params-config
              optional: true
        image: quay.io/numaproj/numaflow:latest
        imagePullPolicy: Always
        name: server-init
        volumeMounts:
        - mountPath: /opt/numaflow
          name: env-volume
      - args:
        - server-secrets-init
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NUMAFLOW_SERVER_DISABLE_AUTH
          valueFrom:
            configMapKeyRef:
              key: server.disable.auth
              name: numaflow-cmd-params-config
              optional: true
        image: quay.io/numaproj/numaflow:latest
        imagePullPolicy: Always
        name: server-secrets-init
      securityContext:
        runAsNonRoot: true
        runAsUser: 9737
      serviceAccountName: numaflow-server-sa
      volumes:
      - emptyDir: {}
        name: env-volume
      - configMap:
          name: numaflow-server-rbac-config
        name: rbac-config
      - configMap:
          name: numaflow-server-metrics-proxy-config
        name: metrics-proxy-config
