// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apis/proto/daemon/daemon.proto

package daemon

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BufferInfo is used to provide information about the buffer including
// pending messages count, if it has unprocessed data etc which helps in pipeline/buffer deletion etc
type BufferInfo struct {
	Pipeline        *string `protobuf:"bytes,1,req,name=pipeline" json:"pipeline,omitempty"`
	FromVertex      *string `protobuf:"bytes,2,req,name=fromVertex" json:"fromVertex,omitempty"`
	ToVertex        *string `protobuf:"bytes,3,req,name=toVertex" json:"toVertex,omitempty"`
	BufferName      *string `protobuf:"bytes,4,req,name=bufferName" json:"bufferName,omitempty"`
	PendingCount    *int64  `protobuf:"varint,5,req,name=pendingCount" json:"pendingCount,omitempty"`
	AckPendingCount *int64  `protobuf:"varint,6,req,name=ackPendingCount" json:"ackPendingCount,omitempty"`
	// Total messages existing in the buffer, including pending, ackPending and acked.
	TotalMessages        *int64   `protobuf:"varint,7,req,name=totalMessages" json:"totalMessages,omitempty"`
	BufferLength         *int64   `protobuf:"varint,8,req,name=bufferLength" json:"bufferLength,omitempty"`
	BufferUsageLimit     *float64 `protobuf:"fixed64,9,req,name=bufferUsageLimit" json:"bufferUsageLimit,omitempty"`
	BufferUsage          *float64 `protobuf:"fixed64,10,req,name=bufferUsage" json:"bufferUsage,omitempty"`
	IsFull               *bool    `protobuf:"varint,11,req,name=isFull" json:"isFull,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BufferInfo) Reset()         { *m = BufferInfo{} }
func (m *BufferInfo) String() string { return proto.CompactTextString(m) }
func (*BufferInfo) ProtoMessage()    {}
func (*BufferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{0}
}
func (m *BufferInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BufferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BufferInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BufferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferInfo.Merge(m, src)
}
func (m *BufferInfo) XXX_Size() int {
	return m.Size()
}
func (m *BufferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BufferInfo proto.InternalMessageInfo

func (m *BufferInfo) GetPipeline() string {
	if m != nil && m.Pipeline != nil {
		return *m.Pipeline
	}
	return ""
}

func (m *BufferInfo) GetFromVertex() string {
	if m != nil && m.FromVertex != nil {
		return *m.FromVertex
	}
	return ""
}

func (m *BufferInfo) GetToVertex() string {
	if m != nil && m.ToVertex != nil {
		return *m.ToVertex
	}
	return ""
}

func (m *BufferInfo) GetBufferName() string {
	if m != nil && m.BufferName != nil {
		return *m.BufferName
	}
	return ""
}

func (m *BufferInfo) GetPendingCount() int64 {
	if m != nil && m.PendingCount != nil {
		return *m.PendingCount
	}
	return 0
}

func (m *BufferInfo) GetAckPendingCount() int64 {
	if m != nil && m.AckPendingCount != nil {
		return *m.AckPendingCount
	}
	return 0
}

func (m *BufferInfo) GetTotalMessages() int64 {
	if m != nil && m.TotalMessages != nil {
		return *m.TotalMessages
	}
	return 0
}

func (m *BufferInfo) GetBufferLength() int64 {
	if m != nil && m.BufferLength != nil {
		return *m.BufferLength
	}
	return 0
}

func (m *BufferInfo) GetBufferUsageLimit() float64 {
	if m != nil && m.BufferUsageLimit != nil {
		return *m.BufferUsageLimit
	}
	return 0
}

func (m *BufferInfo) GetBufferUsage() float64 {
	if m != nil && m.BufferUsage != nil {
		return *m.BufferUsage
	}
	return 0
}

func (m *BufferInfo) GetIsFull() bool {
	if m != nil && m.IsFull != nil {
		return *m.IsFull
	}
	return false
}

// VertexMetrics is used to provide information about the vertex including processing rate.
type VertexMetrics struct {
	Pipeline             *string            `protobuf:"bytes,1,req,name=pipeline" json:"pipeline,omitempty"`
	Vertex               *string            `protobuf:"bytes,2,req,name=vertex" json:"vertex,omitempty"`
	ProcessingRates      map[string]float64 `protobuf:"bytes,3,rep,name=processingRates" json:"processingRates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Pendings             map[string]int64   `protobuf:"bytes,4,rep,name=pendings" json:"pendings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VertexMetrics) Reset()         { *m = VertexMetrics{} }
func (m *VertexMetrics) String() string { return proto.CompactTextString(m) }
func (*VertexMetrics) ProtoMessage()    {}
func (*VertexMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{1}
}
func (m *VertexMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VertexMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VertexMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VertexMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VertexMetrics.Merge(m, src)
}
func (m *VertexMetrics) XXX_Size() int {
	return m.Size()
}
func (m *VertexMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_VertexMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_VertexMetrics proto.InternalMessageInfo

func (m *VertexMetrics) GetPipeline() string {
	if m != nil && m.Pipeline != nil {
		return *m.Pipeline
	}
	return ""
}

func (m *VertexMetrics) GetVertex() string {
	if m != nil && m.Vertex != nil {
		return *m.Vertex
	}
	return ""
}

func (m *VertexMetrics) GetProcessingRates() map[string]float64 {
	if m != nil {
		return m.ProcessingRates
	}
	return nil
}

func (m *VertexMetrics) GetPendings() map[string]int64 {
	if m != nil {
		return m.Pendings
	}
	return nil
}

type ListBuffersRequest struct {
	Pipeline             *string  `protobuf:"bytes,1,req,name=pipeline" json:"pipeline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBuffersRequest) Reset()         { *m = ListBuffersRequest{} }
func (m *ListBuffersRequest) String() string { return proto.CompactTextString(m) }
func (*ListBuffersRequest) ProtoMessage()    {}
func (*ListBuffersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{2}
}
func (m *ListBuffersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBuffersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBuffersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBuffersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBuffersRequest.Merge(m, src)
}
func (m *ListBuffersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBuffersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBuffersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBuffersRequest proto.InternalMessageInfo

func (m *ListBuffersRequest) GetPipeline() string {
	if m != nil && m.Pipeline != nil {
		return *m.Pipeline
	}
	return ""
}

type ListBuffersResponse struct {
	Buffers              []*BufferInfo `protobuf:"bytes,1,rep,name=buffers" json:"buffers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListBuffersResponse) Reset()         { *m = ListBuffersResponse{} }
func (m *ListBuffersResponse) String() string { return proto.CompactTextString(m) }
func (*ListBuffersResponse) ProtoMessage()    {}
func (*ListBuffersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{3}
}
func (m *ListBuffersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBuffersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBuffersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBuffersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBuffersResponse.Merge(m, src)
}
func (m *ListBuffersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBuffersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBuffersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBuffersResponse proto.InternalMessageInfo

func (m *ListBuffersResponse) GetBuffers() []*BufferInfo {
	if m != nil {
		return m.Buffers
	}
	return nil
}

type GetBufferRequest struct {
	Pipeline             *string  `protobuf:"bytes,1,req,name=pipeline" json:"pipeline,omitempty"`
	Buffer               *string  `protobuf:"bytes,2,req,name=buffer" json:"buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBufferRequest) Reset()         { *m = GetBufferRequest{} }
func (m *GetBufferRequest) String() string { return proto.CompactTextString(m) }
func (*GetBufferRequest) ProtoMessage()    {}
func (*GetBufferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{4}
}
func (m *GetBufferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBufferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBufferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBufferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBufferRequest.Merge(m, src)
}
func (m *GetBufferRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBufferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBufferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBufferRequest proto.InternalMessageInfo

func (m *GetBufferRequest) GetPipeline() string {
	if m != nil && m.Pipeline != nil {
		return *m.Pipeline
	}
	return ""
}

func (m *GetBufferRequest) GetBuffer() string {
	if m != nil && m.Buffer != nil {
		return *m.Buffer
	}
	return ""
}

type GetBufferResponse struct {
	Buffer               *BufferInfo `protobuf:"bytes,1,req,name=buffer" json:"buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetBufferResponse) Reset()         { *m = GetBufferResponse{} }
func (m *GetBufferResponse) String() string { return proto.CompactTextString(m) }
func (*GetBufferResponse) ProtoMessage()    {}
func (*GetBufferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{5}
}
func (m *GetBufferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBufferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBufferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBufferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBufferResponse.Merge(m, src)
}
func (m *GetBufferResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBufferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBufferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBufferResponse proto.InternalMessageInfo

func (m *GetBufferResponse) GetBuffer() *BufferInfo {
	if m != nil {
		return m.Buffer
	}
	return nil
}

type GetVertexMetricsRequest struct {
	Pipeline             *string  `protobuf:"bytes,2,req,name=pipeline" json:"pipeline,omitempty"`
	Vertex               *string  `protobuf:"bytes,3,req,name=vertex" json:"vertex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVertexMetricsRequest) Reset()         { *m = GetVertexMetricsRequest{} }
func (m *GetVertexMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*GetVertexMetricsRequest) ProtoMessage()    {}
func (*GetVertexMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{6}
}
func (m *GetVertexMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVertexMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVertexMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVertexMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVertexMetricsRequest.Merge(m, src)
}
func (m *GetVertexMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetVertexMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVertexMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVertexMetricsRequest proto.InternalMessageInfo

func (m *GetVertexMetricsRequest) GetPipeline() string {
	if m != nil && m.Pipeline != nil {
		return *m.Pipeline
	}
	return ""
}

func (m *GetVertexMetricsRequest) GetVertex() string {
	if m != nil && m.Vertex != nil {
		return *m.Vertex
	}
	return ""
}

type GetVertexMetricsResponse struct {
	Vertex               *VertexMetrics `protobuf:"bytes,1,req,name=vertex" json:"vertex,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetVertexMetricsResponse) Reset()         { *m = GetVertexMetricsResponse{} }
func (m *GetVertexMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*GetVertexMetricsResponse) ProtoMessage()    {}
func (*GetVertexMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{7}
}
func (m *GetVertexMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVertexMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVertexMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVertexMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVertexMetricsResponse.Merge(m, src)
}
func (m *GetVertexMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVertexMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVertexMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVertexMetricsResponse proto.InternalMessageInfo

func (m *GetVertexMetricsResponse) GetVertex() *VertexMetrics {
	if m != nil {
		return m.Vertex
	}
	return nil
}

// VertexWatermark has vertex to watermark mapping.
type VertexWatermark struct {
	Pipeline             *string  `protobuf:"bytes,1,req,name=pipeline" json:"pipeline,omitempty"`
	Vertex               *string  `protobuf:"bytes,2,req,name=vertex" json:"vertex,omitempty"`
	Watermark            *int64   `protobuf:"varint,3,req,name=watermark" json:"watermark,omitempty"`
	IsWatermarkEnabled   *bool    `protobuf:"varint,4,req,name=isWatermarkEnabled" json:"isWatermarkEnabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VertexWatermark) Reset()         { *m = VertexWatermark{} }
func (m *VertexWatermark) String() string { return proto.CompactTextString(m) }
func (*VertexWatermark) ProtoMessage()    {}
func (*VertexWatermark) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{8}
}
func (m *VertexWatermark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VertexWatermark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VertexWatermark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VertexWatermark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VertexWatermark.Merge(m, src)
}
func (m *VertexWatermark) XXX_Size() int {
	return m.Size()
}
func (m *VertexWatermark) XXX_DiscardUnknown() {
	xxx_messageInfo_VertexWatermark.DiscardUnknown(m)
}

var xxx_messageInfo_VertexWatermark proto.InternalMessageInfo

func (m *VertexWatermark) GetPipeline() string {
	if m != nil && m.Pipeline != nil {
		return *m.Pipeline
	}
	return ""
}

func (m *VertexWatermark) GetVertex() string {
	if m != nil && m.Vertex != nil {
		return *m.Vertex
	}
	return ""
}

func (m *VertexWatermark) GetWatermark() int64 {
	if m != nil && m.Watermark != nil {
		return *m.Watermark
	}
	return 0
}

func (m *VertexWatermark) GetIsWatermarkEnabled() bool {
	if m != nil && m.IsWatermarkEnabled != nil {
		return *m.IsWatermarkEnabled
	}
	return false
}

type GetVertexWatermarkResponse struct {
	VertexWatermark      *VertexWatermark `protobuf:"bytes,1,req,name=vertexWatermark" json:"vertexWatermark,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetVertexWatermarkResponse) Reset()         { *m = GetVertexWatermarkResponse{} }
func (m *GetVertexWatermarkResponse) String() string { return proto.CompactTextString(m) }
func (*GetVertexWatermarkResponse) ProtoMessage()    {}
func (*GetVertexWatermarkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{9}
}
func (m *GetVertexWatermarkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVertexWatermarkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVertexWatermarkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVertexWatermarkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVertexWatermarkResponse.Merge(m, src)
}
func (m *GetVertexWatermarkResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVertexWatermarkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVertexWatermarkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVertexWatermarkResponse proto.InternalMessageInfo

func (m *GetVertexWatermarkResponse) GetVertexWatermark() *VertexWatermark {
	if m != nil {
		return m.VertexWatermark
	}
	return nil
}

// GetVertexWatermarksRequest requests for the watermark for a pipeline's vertex.
type GetVertexWatermarkRequest struct {
	Pipeline             *string  `protobuf:"bytes,1,req,name=pipeline" json:"pipeline,omitempty"`
	Vertex               *string  `protobuf:"bytes,2,req,name=vertex" json:"vertex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVertexWatermarkRequest) Reset()         { *m = GetVertexWatermarkRequest{} }
func (m *GetVertexWatermarkRequest) String() string { return proto.CompactTextString(m) }
func (*GetVertexWatermarkRequest) ProtoMessage()    {}
func (*GetVertexWatermarkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e327fd0d673221, []int{10}
}
func (m *GetVertexWatermarkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVertexWatermarkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVertexWatermarkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVertexWatermarkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVertexWatermarkRequest.Merge(m, src)
}
func (m *GetVertexWatermarkRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetVertexWatermarkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVertexWatermarkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVertexWatermarkRequest proto.InternalMessageInfo

func (m *GetVertexWatermarkRequest) GetPipeline() string {
	if m != nil && m.Pipeline != nil {
		return *m.Pipeline
	}
	return ""
}

func (m *GetVertexWatermarkRequest) GetVertex() string {
	if m != nil && m.Vertex != nil {
		return *m.Vertex
	}
	return ""
}

func init() {
	proto.RegisterType((*BufferInfo)(nil), "daemon.BufferInfo")
	proto.RegisterType((*VertexMetrics)(nil), "daemon.VertexMetrics")
	proto.RegisterMapType((map[string]int64)(nil), "daemon.VertexMetrics.PendingsEntry")
	proto.RegisterMapType((map[string]float64)(nil), "daemon.VertexMetrics.ProcessingRatesEntry")
	proto.RegisterType((*ListBuffersRequest)(nil), "daemon.ListBuffersRequest")
	proto.RegisterType((*ListBuffersResponse)(nil), "daemon.ListBuffersResponse")
	proto.RegisterType((*GetBufferRequest)(nil), "daemon.GetBufferRequest")
	proto.RegisterType((*GetBufferResponse)(nil), "daemon.GetBufferResponse")
	proto.RegisterType((*GetVertexMetricsRequest)(nil), "daemon.GetVertexMetricsRequest")
	proto.RegisterType((*GetVertexMetricsResponse)(nil), "daemon.GetVertexMetricsResponse")
	proto.RegisterType((*VertexWatermark)(nil), "daemon.VertexWatermark")
	proto.RegisterType((*GetVertexWatermarkResponse)(nil), "daemon.GetVertexWatermarkResponse")
	proto.RegisterType((*GetVertexWatermarkRequest)(nil), "daemon.GetVertexWatermarkRequest")
}

func init() {
	proto.RegisterFile("pkg/apis/proto/daemon/daemon.proto", fileDescriptor_93e327fd0d673221)
}

var fileDescriptor_93e327fd0d673221 = []byte{
	// 829 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0x96, 0xed, 0x74, 0xbb, 0x7b, 0x96, 0xd5, 0x86, 0xa1, 0xb4, 0x53, 0xb7, 0x5a, 0x8c, 0xa9,
	0x90, 0x15, 0xb5, 0x6b, 0x88, 0x04, 0x8a, 0x8a, 0x44, 0x4b, 0x4a, 0x5b, 0x55, 0x4a, 0xa0, 0x32,
	0x7f, 0x12, 0x37, 0xc8, 0xbb, 0x99, 0x75, 0xcd, 0xda, 0x1e, 0xe3, 0x19, 0x6f, 0x88, 0xaa, 0xdc,
	0xf4, 0x15, 0x22, 0x2e, 0x79, 0x0d, 0x9e, 0x81, 0x4b, 0x24, 0x2e, 0xb9, 0x41, 0x11, 0x0f, 0x82,
	0x3c, 0x33, 0xf6, 0xda, 0xbb, 0xce, 0x12, 0x7a, 0x95, 0x39, 0x7f, 0xdf, 0xf7, 0x9d, 0x39, 0x67,
	0x9c, 0x05, 0x3b, 0x9d, 0x07, 0xae, 0x9f, 0x86, 0xcc, 0x4d, 0x33, 0xca, 0xa9, 0x7b, 0xe4, 0x93,
	0x98, 0x26, 0xea, 0xcf, 0x58, 0xf8, 0x50, 0x47, 0x5a, 0xe6, 0xed, 0x80, 0xd2, 0x20, 0x22, 0x45,
	0xba, 0xeb, 0x27, 0x09, 0xe5, 0x3e, 0x0f, 0x69, 0xc2, 0x64, 0x96, 0x79, 0x4b, 0x45, 0x85, 0x35,
	0xc9, 0x67, 0x2e, 0x89, 0x53, 0x7e, 0x22, 0x83, 0xf6, 0x2b, 0x03, 0x60, 0x3f, 0x9f, 0xcd, 0x48,
	0xf6, 0x2c, 0x99, 0x51, 0x64, 0x42, 0x37, 0x0d, 0x53, 0x12, 0x85, 0x09, 0xc1, 0x9a, 0xa5, 0x3b,
	0x3d, 0xaf, 0xb2, 0xd1, 0x08, 0x60, 0x96, 0xd1, 0xf8, 0x5b, 0x92, 0x71, 0xf2, 0x33, 0xd6, 0x45,
	0xb4, 0xe6, 0x29, 0x6a, 0x39, 0x55, 0x51, 0x43, 0xd6, 0x96, 0x76, 0x51, 0x3b, 0x11, 0x2c, 0x5f,
	0xf8, 0x31, 0xc1, 0x5b, 0xb2, 0x76, 0xe9, 0x41, 0x36, 0xbc, 0x91, 0x92, 0xe4, 0x28, 0x4c, 0x82,
	0x47, 0x34, 0x4f, 0x38, 0xbe, 0x62, 0xe9, 0x8e, 0xe1, 0x35, 0x7c, 0xc8, 0x81, 0xa1, 0x3f, 0x9d,
	0x3f, 0xaf, 0xa7, 0x75, 0x44, 0xda, 0xaa, 0x1b, 0xdd, 0x81, 0x01, 0xa7, 0xdc, 0x8f, 0x0e, 0x09,
	0x63, 0x7e, 0x40, 0x18, 0xbe, 0x2a, 0xf2, 0x9a, 0xce, 0x82, 0x53, 0x2a, 0x38, 0x20, 0x49, 0xc0,
	0x5f, 0xe0, 0xae, 0xe4, 0xac, 0xfb, 0xd0, 0x0e, 0x6c, 0x4b, 0xfb, 0x9b, 0xa2, 0xe6, 0x20, 0x8c,
	0x43, 0x8e, 0x7b, 0x96, 0xee, 0x68, 0xde, 0x9a, 0x1f, 0x59, 0xd0, 0xaf, 0xf9, 0x30, 0x88, 0xb4,
	0xba, 0x0b, 0x5d, 0x87, 0x4e, 0xc8, 0x9e, 0xe4, 0x51, 0x84, 0xfb, 0x96, 0xee, 0x74, 0x3d, 0x65,
	0xd9, 0x7f, 0xe9, 0x30, 0x90, 0x17, 0x75, 0x48, 0x78, 0x16, 0x4e, 0xd9, 0xc6, 0x39, 0x5c, 0x87,
	0xce, 0xa2, 0x3e, 0x03, 0x65, 0xa1, 0xaf, 0x61, 0x98, 0x66, 0x74, 0x4a, 0x18, 0x0b, 0x93, 0xc0,
	0xf3, 0x39, 0x61, 0xd8, 0xb0, 0x0c, 0xa7, 0xbf, 0xbb, 0x33, 0x56, 0x5b, 0xd3, 0xe0, 0x18, 0x3f,
	0x6f, 0x26, 0x3f, 0x4e, 0x78, 0x76, 0xe2, 0xad, 0x42, 0xa0, 0x07, 0xd0, 0x55, 0x53, 0x60, 0x78,
	0x4b, 0xc0, 0xbd, 0x77, 0x01, 0x9c, 0xca, 0x92, 0x38, 0x55, 0x91, 0xb9, 0x0f, 0xd7, 0xda, 0x98,
	0xd0, 0x36, 0x18, 0x73, 0x72, 0x82, 0x35, 0x4b, 0x73, 0x7a, 0x5e, 0x71, 0x44, 0xd7, 0xe0, 0xca,
	0xc2, 0x8f, 0x72, 0x82, 0x75, 0x4b, 0x73, 0x34, 0x4f, 0x1a, 0xf7, 0xf5, 0x3d, 0xcd, 0xfc, 0x04,
	0x06, 0x0d, 0xf8, 0xff, 0x2a, 0x36, 0x6a, 0xc5, 0xf6, 0x07, 0x80, 0x0e, 0x42, 0xc6, 0xe5, 0x96,
	0x33, 0x8f, 0xfc, 0x94, 0x13, 0xc6, 0x37, 0xdd, 0xb0, 0xfd, 0x08, 0xde, 0x6a, 0x54, 0xb0, 0x94,
	0x26, 0x8c, 0xa0, 0xbb, 0x70, 0x55, 0x4e, 0x93, 0x61, 0x4d, 0xdc, 0x04, 0x2a, 0x6f, 0x62, 0xf9,
	0x82, 0xbc, 0x32, 0xc5, 0x7e, 0x02, 0xdb, 0x4f, 0x89, 0xc2, 0xb8, 0x04, 0x69, 0x31, 0x56, 0x59,
	0x5a, 0x8e, 0x55, 0x5a, 0xf6, 0x03, 0x78, 0xb3, 0x86, 0xa3, 0xa4, 0xec, 0x54, 0xc9, 0x05, 0x4c,
	0xbb, 0x92, 0x12, 0xe0, 0x10, 0x6e, 0x3c, 0x25, 0xbc, 0x31, 0xac, 0x36, 0x3d, 0xfa, 0x85, 0x6b,
	0x66, 0xd4, 0xd7, 0xcc, 0x7e, 0x06, 0x78, 0x1d, 0x4e, 0xc9, 0xba, 0x57, 0xd5, 0x48, 0x59, 0x6f,
	0xb7, 0xae, 0x4a, 0x05, 0x75, 0xa6, 0xc1, 0x50, 0x46, 0xbe, 0xf3, 0x39, 0xc9, 0x62, 0x3f, 0x9b,
	0xbf, 0xd6, 0xe6, 0xdf, 0x86, 0xde, 0x71, 0x09, 0x20, 0xd4, 0x1a, 0xde, 0xd2, 0x81, 0xc6, 0x80,
	0x42, 0x56, 0x11, 0x3c, 0x4e, 0xfc, 0x49, 0x44, 0x8e, 0xc4, 0x37, 0xa8, 0xeb, 0xb5, 0x44, 0xec,
	0x1f, 0xc0, 0xac, 0x1a, 0xac, 0x82, 0x55, 0x8b, 0x9f, 0xc1, 0x70, 0xd1, 0x0c, 0xa9, 0x5e, 0x6f,
	0x34, 0x7b, 0x5d, 0x56, 0xae, 0xe6, 0xdb, 0x5f, 0xc2, 0xcd, 0x36, 0x82, 0x4b, 0xad, 0x48, 0x5b,
	0xff, 0xbb, 0xbf, 0x6d, 0xc1, 0xe0, 0x73, 0x41, 0xfe, 0x15, 0xc9, 0x16, 0xe1, 0x94, 0x20, 0x0e,
	0xfd, 0xda, 0x06, 0x23, 0xb3, 0xd4, 0xb6, 0xfe, 0x10, 0xcc, 0x5b, 0xad, 0x31, 0xd9, 0xad, 0x7d,
	0xf7, 0xd5, 0x9f, 0xff, 0x9c, 0xe9, 0xef, 0xa3, 0x3b, 0xe2, 0x7f, 0xcb, 0xe2, 0x43, 0xb7, 0xd4,
	0xc2, 0xdc, 0x97, 0xe5, 0xf1, 0xd4, 0x55, 0x2b, 0x8f, 0x8e, 0xa1, 0x57, 0xad, 0x2a, 0xc2, 0x25,
	0xee, 0xea, 0x2b, 0x30, 0x6f, 0xb6, 0x44, 0x14, 0xdf, 0x47, 0x82, 0xcf, 0x45, 0xf7, 0x2e, 0xc3,
	0xe7, 0xbe, 0x94, 0x87, 0x53, 0xf4, 0x8b, 0x26, 0x1e, 0x5b, 0xf3, 0x1b, 0xfa, 0x4e, 0x8d, 0xa6,
	0x6d, 0xfb, 0x4d, 0xeb, 0xe2, 0x04, 0x25, 0xe7, 0x53, 0x21, 0x67, 0x0f, 0x7d, 0xbc, 0x51, 0x4e,
	0x31, 0x85, 0x70, 0x5a, 0xf8, 0xe4, 0x3c, 0x4e, 0xdd, 0x58, 0x49, 0xf8, 0x55, 0x03, 0xb4, 0x3e,
	0x6a, 0xf4, 0xee, 0x1a, 0xf1, 0xea, 0x1a, 0x98, 0xf6, 0xa6, 0x14, 0xa5, 0xee, 0xa1, 0x50, 0x77,
	0x1f, 0xed, 0xfd, 0x4f, 0x75, 0xd5, 0xd3, 0xd8, 0x7f, 0xf8, 0xfb, 0xf9, 0x48, 0xfb, 0xe3, 0x7c,
	0xa4, 0xfd, 0x7d, 0x3e, 0xd2, 0xbe, 0xdf, 0x0d, 0x42, 0xfe, 0x22, 0x9f, 0x8c, 0xa7, 0x34, 0x76,
	0x93, 0x3c, 0xf6, 0xd3, 0x8c, 0xfe, 0x28, 0x0e, 0xb3, 0x88, 0x1e, 0xbb, 0xad, 0xbf, 0x47, 0xfe,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x2f, 0xdb, 0xd7, 0xa7, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DaemonServiceClient is the client API for DaemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DaemonServiceClient interface {
	ListBuffers(ctx context.Context, in *ListBuffersRequest, opts ...grpc.CallOption) (*ListBuffersResponse, error)
	GetBuffer(ctx context.Context, in *GetBufferRequest, opts ...grpc.CallOption) (*GetBufferResponse, error)
	GetVertexMetrics(ctx context.Context, in *GetVertexMetricsRequest, opts ...grpc.CallOption) (*GetVertexMetricsResponse, error)
	// GetVertexWatermark return the watermark of the given vertex based on the incoming edge buffer
	GetVertexWatermark(ctx context.Context, in *GetVertexWatermarkRequest, opts ...grpc.CallOption) (*GetVertexWatermarkResponse, error)
}

type daemonServiceClient struct {
	cc *grpc.ClientConn
}

func NewDaemonServiceClient(cc *grpc.ClientConn) DaemonServiceClient {
	return &daemonServiceClient{cc}
}

func (c *daemonServiceClient) ListBuffers(ctx context.Context, in *ListBuffersRequest, opts ...grpc.CallOption) (*ListBuffersResponse, error) {
	out := new(ListBuffersResponse)
	err := c.cc.Invoke(ctx, "/daemon.DaemonService/ListBuffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonServiceClient) GetBuffer(ctx context.Context, in *GetBufferRequest, opts ...grpc.CallOption) (*GetBufferResponse, error) {
	out := new(GetBufferResponse)
	err := c.cc.Invoke(ctx, "/daemon.DaemonService/GetBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonServiceClient) GetVertexMetrics(ctx context.Context, in *GetVertexMetricsRequest, opts ...grpc.CallOption) (*GetVertexMetricsResponse, error) {
	out := new(GetVertexMetricsResponse)
	err := c.cc.Invoke(ctx, "/daemon.DaemonService/GetVertexMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonServiceClient) GetVertexWatermark(ctx context.Context, in *GetVertexWatermarkRequest, opts ...grpc.CallOption) (*GetVertexWatermarkResponse, error) {
	out := new(GetVertexWatermarkResponse)
	err := c.cc.Invoke(ctx, "/daemon.DaemonService/GetVertexWatermark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServiceServer is the server API for DaemonService service.
type DaemonServiceServer interface {
	ListBuffers(context.Context, *ListBuffersRequest) (*ListBuffersResponse, error)
	GetBuffer(context.Context, *GetBufferRequest) (*GetBufferResponse, error)
	GetVertexMetrics(context.Context, *GetVertexMetricsRequest) (*GetVertexMetricsResponse, error)
	// GetVertexWatermark return the watermark of the given vertex based on the incoming edge buffer
	GetVertexWatermark(context.Context, *GetVertexWatermarkRequest) (*GetVertexWatermarkResponse, error)
}

// UnimplementedDaemonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDaemonServiceServer struct {
}

func (*UnimplementedDaemonServiceServer) ListBuffers(ctx context.Context, req *ListBuffersRequest) (*ListBuffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuffers not implemented")
}
func (*UnimplementedDaemonServiceServer) GetBuffer(ctx context.Context, req *GetBufferRequest) (*GetBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuffer not implemented")
}
func (*UnimplementedDaemonServiceServer) GetVertexMetrics(ctx context.Context, req *GetVertexMetricsRequest) (*GetVertexMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertexMetrics not implemented")
}
func (*UnimplementedDaemonServiceServer) GetVertexWatermark(ctx context.Context, req *GetVertexWatermarkRequest) (*GetVertexWatermarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertexWatermark not implemented")
}

func RegisterDaemonServiceServer(s *grpc.Server, srv DaemonServiceServer) {
	s.RegisterService(&_DaemonService_serviceDesc, srv)
}

func _DaemonService_ListBuffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).ListBuffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.DaemonService/ListBuffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).ListBuffers(ctx, req.(*ListBuffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonService_GetBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).GetBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.DaemonService/GetBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).GetBuffer(ctx, req.(*GetBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonService_GetVertexMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVertexMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).GetVertexMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.DaemonService/GetVertexMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).GetVertexMetrics(ctx, req.(*GetVertexMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonService_GetVertexWatermark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVertexWatermarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).GetVertexWatermark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.DaemonService/GetVertexWatermark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).GetVertexWatermark(ctx, req.(*GetVertexWatermarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DaemonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.DaemonService",
	HandlerType: (*DaemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuffers",
			Handler:    _DaemonService_ListBuffers_Handler,
		},
		{
			MethodName: "GetBuffer",
			Handler:    _DaemonService_GetBuffer_Handler,
		},
		{
			MethodName: "GetVertexMetrics",
			Handler:    _DaemonService_GetVertexMetrics_Handler,
		},
		{
			MethodName: "GetVertexWatermark",
			Handler:    _DaemonService_GetVertexWatermark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/proto/daemon/daemon.proto",
}

func (m *BufferInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BufferInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFull == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("isFull")
	} else {
		i--
		if *m.IsFull {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.BufferUsage == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("bufferUsage")
	} else {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.BufferUsage))))
		i--
		dAtA[i] = 0x51
	}
	if m.BufferUsageLimit == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("bufferUsageLimit")
	} else {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.BufferUsageLimit))))
		i--
		dAtA[i] = 0x49
	}
	if m.BufferLength == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("bufferLength")
	} else {
		i = encodeVarintDaemon(dAtA, i, uint64(*m.BufferLength))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalMessages == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("totalMessages")
	} else {
		i = encodeVarintDaemon(dAtA, i, uint64(*m.TotalMessages))
		i--
		dAtA[i] = 0x38
	}
	if m.AckPendingCount == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ackPendingCount")
	} else {
		i = encodeVarintDaemon(dAtA, i, uint64(*m.AckPendingCount))
		i--
		dAtA[i] = 0x30
	}
	if m.PendingCount == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("pendingCount")
	} else {
		i = encodeVarintDaemon(dAtA, i, uint64(*m.PendingCount))
		i--
		dAtA[i] = 0x28
	}
	if m.BufferName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("bufferName")
	} else {
		i -= len(*m.BufferName)
		copy(dAtA[i:], *m.BufferName)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.BufferName)))
		i--
		dAtA[i] = 0x22
	}
	if m.ToVertex == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("toVertex")
	} else {
		i -= len(*m.ToVertex)
		copy(dAtA[i:], *m.ToVertex)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.ToVertex)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FromVertex == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("fromVertex")
	} else {
		i -= len(*m.FromVertex)
		copy(dAtA[i:], *m.FromVertex)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.FromVertex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pipeline == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	} else {
		i -= len(*m.Pipeline)
		copy(dAtA[i:], *m.Pipeline)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Pipeline)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VertexMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VertexMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VertexMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pendings) > 0 {
		for k := range m.Pendings {
			v := m.Pendings[k]
			baseI := i
			i = encodeVarintDaemon(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDaemon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDaemon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ProcessingRates) > 0 {
		for k := range m.ProcessingRates {
			v := m.ProcessingRates[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDaemon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDaemon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Vertex == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	} else {
		i -= len(*m.Vertex)
		copy(dAtA[i:], *m.Vertex)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Vertex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pipeline == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	} else {
		i -= len(*m.Pipeline)
		copy(dAtA[i:], *m.Pipeline)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Pipeline)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBuffersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBuffersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBuffersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pipeline == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	} else {
		i -= len(*m.Pipeline)
		copy(dAtA[i:], *m.Pipeline)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Pipeline)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBuffersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBuffersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBuffersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buffers) > 0 {
		for iNdEx := len(m.Buffers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buffers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDaemon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBufferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBufferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBufferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Buffer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("buffer")
	} else {
		i -= len(*m.Buffer)
		copy(dAtA[i:], *m.Buffer)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Buffer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pipeline == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	} else {
		i -= len(*m.Pipeline)
		copy(dAtA[i:], *m.Pipeline)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Pipeline)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBufferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBufferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBufferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Buffer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("buffer")
	} else {
		{
			size, err := m.Buffer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDaemon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVertexMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVertexMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVertexMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vertex == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	} else {
		i -= len(*m.Vertex)
		copy(dAtA[i:], *m.Vertex)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Vertex)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pipeline == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	} else {
		i -= len(*m.Pipeline)
		copy(dAtA[i:], *m.Pipeline)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Pipeline)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *GetVertexMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVertexMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVertexMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vertex == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	} else {
		{
			size, err := m.Vertex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDaemon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VertexWatermark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VertexWatermark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VertexWatermark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsWatermarkEnabled == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("isWatermarkEnabled")
	} else {
		i--
		if *m.IsWatermarkEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Watermark == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("watermark")
	} else {
		i = encodeVarintDaemon(dAtA, i, uint64(*m.Watermark))
		i--
		dAtA[i] = 0x18
	}
	if m.Vertex == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	} else {
		i -= len(*m.Vertex)
		copy(dAtA[i:], *m.Vertex)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Vertex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pipeline == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	} else {
		i -= len(*m.Pipeline)
		copy(dAtA[i:], *m.Pipeline)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Pipeline)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVertexWatermarkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVertexWatermarkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVertexWatermarkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VertexWatermark == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertexWatermark")
	} else {
		{
			size, err := m.VertexWatermark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDaemon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVertexWatermarkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVertexWatermarkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVertexWatermarkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vertex == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	} else {
		i -= len(*m.Vertex)
		copy(dAtA[i:], *m.Vertex)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Vertex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pipeline == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	} else {
		i -= len(*m.Pipeline)
		copy(dAtA[i:], *m.Pipeline)
		i = encodeVarintDaemon(dAtA, i, uint64(len(*m.Pipeline)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDaemon(dAtA []byte, offset int, v uint64) int {
	offset -= sovDaemon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BufferInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = len(*m.Pipeline)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.FromVertex != nil {
		l = len(*m.FromVertex)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.ToVertex != nil {
		l = len(*m.ToVertex)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.BufferName != nil {
		l = len(*m.BufferName)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.PendingCount != nil {
		n += 1 + sovDaemon(uint64(*m.PendingCount))
	}
	if m.AckPendingCount != nil {
		n += 1 + sovDaemon(uint64(*m.AckPendingCount))
	}
	if m.TotalMessages != nil {
		n += 1 + sovDaemon(uint64(*m.TotalMessages))
	}
	if m.BufferLength != nil {
		n += 1 + sovDaemon(uint64(*m.BufferLength))
	}
	if m.BufferUsageLimit != nil {
		n += 9
	}
	if m.BufferUsage != nil {
		n += 9
	}
	if m.IsFull != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VertexMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = len(*m.Pipeline)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Vertex != nil {
		l = len(*m.Vertex)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if len(m.ProcessingRates) > 0 {
		for k, v := range m.ProcessingRates {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDaemon(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovDaemon(uint64(mapEntrySize))
		}
	}
	if len(m.Pendings) > 0 {
		for k, v := range m.Pendings {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDaemon(uint64(len(k))) + 1 + sovDaemon(uint64(v))
			n += mapEntrySize + 1 + sovDaemon(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBuffersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = len(*m.Pipeline)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBuffersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buffers) > 0 {
		for _, e := range m.Buffers {
			l = e.Size()
			n += 1 + l + sovDaemon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBufferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = len(*m.Pipeline)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Buffer != nil {
		l = len(*m.Buffer)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBufferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Buffer != nil {
		l = m.Buffer.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVertexMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = len(*m.Pipeline)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Vertex != nil {
		l = len(*m.Vertex)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVertexMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vertex != nil {
		l = m.Vertex.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VertexWatermark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = len(*m.Pipeline)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Vertex != nil {
		l = len(*m.Vertex)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Watermark != nil {
		n += 1 + sovDaemon(uint64(*m.Watermark))
	}
	if m.IsWatermarkEnabled != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVertexWatermarkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VertexWatermark != nil {
		l = m.VertexWatermark.Size()
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVertexWatermarkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pipeline != nil {
		l = len(*m.Pipeline)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.Vertex != nil {
		l = len(*m.Vertex)
		n += 1 + l + sovDaemon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDaemon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDaemon(x uint64) (n int) {
	return sovDaemon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BufferInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pipeline = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromVertex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FromVertex = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToVertex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ToVertex = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BufferName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendingCount = &v
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckPendingCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AckPendingCount = &v
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMessages", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalMessages = &v
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferLength", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BufferLength = &v
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferUsageLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.BufferUsageLimit = &v2
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferUsage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.BufferUsage = &v2
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFull = &b
			hasFields[0] |= uint64(0x00000400)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fromVertex")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("toVertex")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("bufferName")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pendingCount")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ackPendingCount")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("totalMessages")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("bufferLength")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("bufferUsageLimit")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("bufferUsage")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isFull")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VertexMetrics) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VertexMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VertexMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pipeline = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Vertex = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcessingRates == nil {
				m.ProcessingRates = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDaemon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDaemon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDaemon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDaemon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDaemon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDaemon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ProcessingRates[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pendings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pendings == nil {
				m.Pendings = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDaemon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDaemon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDaemon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDaemon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDaemon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDaemon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDaemon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Pendings[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBuffersRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBuffersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBuffersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pipeline = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBuffersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBuffersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBuffersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buffers = append(m.Buffers, &BufferInfo{})
			if err := m.Buffers[len(m.Buffers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBufferRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBufferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBufferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pipeline = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Buffer = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("buffer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBufferResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBufferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBufferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buffer == nil {
				m.Buffer = &BufferInfo{}
			}
			if err := m.Buffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("buffer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVertexMetricsRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVertexMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVertexMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pipeline = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Vertex = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVertexMetricsResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVertexMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVertexMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vertex == nil {
				m.Vertex = &VertexMetrics{}
			}
			if err := m.Vertex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VertexWatermark) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VertexWatermark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VertexWatermark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pipeline = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Vertex = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watermark", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Watermark = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWatermarkEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsWatermarkEnabled = &b
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("watermark")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isWatermarkEnabled")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVertexWatermarkResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVertexWatermarkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVertexWatermarkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexWatermark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VertexWatermark == nil {
				m.VertexWatermark = &VertexWatermark{}
			}
			if err := m.VertexWatermark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertexWatermark")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVertexWatermarkRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVertexWatermarkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVertexWatermarkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pipeline = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaemon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaemon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Vertex = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipDaemon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaemon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pipeline")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vertex")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDaemon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDaemon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaemon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDaemon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDaemon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDaemon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDaemon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDaemon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDaemon = fmt.Errorf("proto: unexpected end of group")
)
