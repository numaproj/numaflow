/*
Copyright 2022 The Numaproj Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

option go_package = "github.com/numaproj/numaflow/pkg/apis/proto/daemon";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

package daemon;

// BufferInfo is used to provide information about the buffer including
// pending messages count, if it has unprocessed data etc which helps in pipeline/buffer deletion etc
message BufferInfo {
  string pipeline = 1;
  string bufferName = 2;
  google.protobuf.Int64Value pendingCount = 3;
  google.protobuf.Int64Value ackPendingCount = 4;
  // Total messages existing in the buffer, including pending, ackPending and acked.
  // Using Int64Value to solve the problem of int64 in proto3 being serialized to string when converting to JSON.
  google.protobuf.Int64Value totalMessages = 5;
  google.protobuf.Int64Value bufferLength = 6;
  google.protobuf.DoubleValue bufferUsageLimit = 7;
  google.protobuf.DoubleValue bufferUsage = 8;
  google.protobuf.BoolValue isFull = 9;
}

// VertexMetrics is used to provide information about the vertex including processing rate.
message VertexMetrics {
  string pipeline = 1;
  string vertex = 2;
  map<string, google.protobuf.DoubleValue> processingRates = 3;
  map<string, google.protobuf.Int64Value> pendings = 4;
}

// PipelineStatus
message PipelineStatus {
  string status = 1;
  string message = 2;
  string code = 3;
}

message ListBuffersRequest {
    string pipeline = 1;
}

message ListBuffersResponse {
    repeated BufferInfo buffers = 1;
}

message GetBufferRequest {
  string pipeline = 1;
  string buffer = 2;
}

message GetBufferResponse {
    BufferInfo buffer = 1;
}

message GetPipelineStatusRequest {
    string pipeline = 1;
}

message GetPipelineStatusResponse {
    PipelineStatus status = 1;
}

message GetVertexMetricsRequest {
  string pipeline = 2;
  string vertex = 3;
}

message GetVertexMetricsResponse {
  repeated VertexMetrics vertexMetrics = 1;
}

/* Watermark */
// EdgeWatermark has edge to watermark mapping.
message EdgeWatermark {
  string pipeline = 1;
  string edge = 2;
  repeated google.protobuf.Int64Value watermarks = 3;
  google.protobuf.BoolValue isWatermarkEnabled = 4;
  string from = 5;
  string to = 6;
}

message GetPipelineWatermarksResponse {
  repeated EdgeWatermark pipelineWatermarks = 1;
}

// GetPipelineWatermarksRequest requests for the watermark for a pipeline.
message GetPipelineWatermarksRequest {
  string pipeline = 1;
}

// DaemonService is a grpc service that is used to provide APIs for giving any pipeline information.
service DaemonService {

  rpc ListBuffers (ListBuffersRequest) returns (ListBuffersResponse) {
    option (google.api.http).get = "/api/v1/pipelines/{pipeline}/buffers";
  };

  rpc GetBuffer (GetBufferRequest) returns (GetBufferResponse) {
    option (google.api.http).get = "/api/v1/pipelines/{pipeline}/buffers/{buffer}";
  };

  rpc GetVertexMetrics (GetVertexMetricsRequest) returns (GetVertexMetricsResponse) {
    option (google.api.http).get = "/api/v1/pipelines/{pipeline}/vertices/{vertex}/metrics";
  };

  // GetPipelineWatermarks return the watermark of the given pipeline
  rpc GetPipelineWatermarks (GetPipelineWatermarksRequest) returns (GetPipelineWatermarksResponse) {
    option (google.api.http).get = "/api/v1/pipelines/{pipeline}/watermarks";
  };

  rpc GetPipelineStatus (GetPipelineStatusRequest) returns (GetPipelineStatusResponse) {
    option (google.api.http).get = "/api/v1/pipelines/{pipeline}/status";
  };
}