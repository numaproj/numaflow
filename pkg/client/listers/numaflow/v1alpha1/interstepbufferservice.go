/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/numaproj/numaflow/pkg/apis/numaflow/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InterStepBufferServiceLister helps list InterStepBufferServices.
// All objects returned here must be treated as read-only.
type InterStepBufferServiceLister interface {
	// List lists all InterStepBufferServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InterStepBufferService, err error)
	// InterStepBufferServices returns an object that can list and get InterStepBufferServices.
	InterStepBufferServices(namespace string) InterStepBufferServiceNamespaceLister
	InterStepBufferServiceListerExpansion
}

// interStepBufferServiceLister implements the InterStepBufferServiceLister interface.
type interStepBufferServiceLister struct {
	indexer cache.Indexer
}

// NewInterStepBufferServiceLister returns a new InterStepBufferServiceLister.
func NewInterStepBufferServiceLister(indexer cache.Indexer) InterStepBufferServiceLister {
	return &interStepBufferServiceLister{indexer: indexer}
}

// List lists all InterStepBufferServices in the indexer.
func (s *interStepBufferServiceLister) List(selector labels.Selector) (ret []*v1alpha1.InterStepBufferService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InterStepBufferService))
	})
	return ret, err
}

// InterStepBufferServices returns an object that can list and get InterStepBufferServices.
func (s *interStepBufferServiceLister) InterStepBufferServices(namespace string) InterStepBufferServiceNamespaceLister {
	return interStepBufferServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InterStepBufferServiceNamespaceLister helps list and get InterStepBufferServices.
// All objects returned here must be treated as read-only.
type InterStepBufferServiceNamespaceLister interface {
	// List lists all InterStepBufferServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InterStepBufferService, err error)
	// Get retrieves the InterStepBufferService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InterStepBufferService, error)
	InterStepBufferServiceNamespaceListerExpansion
}

// interStepBufferServiceNamespaceLister implements the InterStepBufferServiceNamespaceLister
// interface.
type interStepBufferServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InterStepBufferServices in the indexer for a given namespace.
func (s interStepBufferServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InterStepBufferService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InterStepBufferService))
	})
	return ret, err
}

// Get retrieves the InterStepBufferService from the indexer for a given namespace and name.
func (s interStepBufferServiceNamespaceLister) Get(name string) (*v1alpha1.InterStepBufferService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("interstepbufferservice"), name)
	}
	return obj.(*v1alpha1.InterStepBufferService), nil
}
