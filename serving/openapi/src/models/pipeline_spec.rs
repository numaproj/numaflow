/*
 * Numaflow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineSpec {
    /// Edges define the relationships between vertices
    #[serde(rename = "edges", skip_serializing_if = "Option::is_none")]
    pub edges: Option<Vec<models::Edge>>,
    #[serde(rename = "interStepBufferServiceName", skip_serializing_if = "Option::is_none")]
    pub inter_step_buffer_service_name: Option<String>,
    #[serde(rename = "lifecycle", skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<Box<models::Lifecycle>>,
    #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
    pub limits: Option<Box<models::PipelineLimits>>,
    /// SideInputs defines the Side Inputs of a pipeline.
    #[serde(rename = "sideInputs", skip_serializing_if = "Option::is_none")]
    pub side_inputs: Option<Vec<models::SideInput>>,
    #[serde(rename = "templates", skip_serializing_if = "Option::is_none")]
    pub templates: Option<Box<models::Templates>>,
    #[serde(rename = "vertices", skip_serializing_if = "Option::is_none")]
    pub vertices: Option<Vec<models::AbstractVertex>>,
    #[serde(rename = "watermark", skip_serializing_if = "Option::is_none")]
    pub watermark: Option<Box<models::Watermark>>,
}

impl PipelineSpec {
    pub fn new() -> PipelineSpec {
        PipelineSpec {
            edges: None,
            inter_step_buffer_service_name: None,
            lifecycle: None,
            limits: None,
            side_inputs: None,
            templates: None,
            vertices: None,
            watermark: None,
        }
    }
}

