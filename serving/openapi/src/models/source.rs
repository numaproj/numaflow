/*
 * Numaflow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Source {
    #[serde(rename = "generator", skip_serializing_if = "Option::is_none")]
    pub generator: Option<Box<models::GeneratorSource>>,
    #[serde(rename = "http", skip_serializing_if = "Option::is_none")]
    pub http: Option<Box<models::HttpSource>>,
    #[serde(rename = "jetstream", skip_serializing_if = "Option::is_none")]
    pub jetstream: Option<Box<models::JetStreamSource>>,
    #[serde(rename = "kafka", skip_serializing_if = "Option::is_none")]
    pub kafka: Option<Box<models::KafkaSource>>,
    #[serde(rename = "nats", skip_serializing_if = "Option::is_none")]
    pub nats: Option<Box<models::NatsSource>>,
    #[serde(rename = "serving", skip_serializing_if = "Option::is_none")]
    pub serving: Option<Box<models::ServingSource>>,
    #[serde(rename = "transformer", skip_serializing_if = "Option::is_none")]
    pub transformer: Option<Box<models::UdTransformer>>,
    #[serde(rename = "udsource", skip_serializing_if = "Option::is_none")]
    pub udsource: Option<Box<models::UdSource>>,
}

impl Source {
    pub fn new() -> Source {
        Source {
            generator: None,
            http: None,
            jetstream: None,
            kafka: None,
            nats: None,
            serving: None,
            transformer: None,
            udsource: None,
        }
    }
}

