/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubernetes.client.openapi.models.V1Affinity;
import io.kubernetes.client.openapi.models.V1LocalObjectReference;
import io.kubernetes.client.openapi.models.V1PodSecurityContext;
import io.kubernetes.client.openapi.models.V1Toleration;
import io.numaproj.numaflow.models.ContainerTemplate;
import io.numaproj.numaflow.models.Metadata;
import io.numaproj.numaflow.models.PersistenceStrategy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * JetStreamBufferService
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class JetStreamBufferService {
  public static final String SERIALIZED_NAME_AFFINITY = "affinity";
  @SerializedName(SERIALIZED_NAME_AFFINITY)
  private V1Affinity affinity = null;

  public static final String SERIALIZED_NAME_BUFFER_CONFIG = "bufferConfig";
  @SerializedName(SERIALIZED_NAME_BUFFER_CONFIG)
  private String bufferConfig;

  public static final String SERIALIZED_NAME_CONTAINER_TEMPLATE = "containerTemplate";
  @SerializedName(SERIALIZED_NAME_CONTAINER_TEMPLATE)
  private ContainerTemplate containerTemplate;

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private Boolean encryption;

  public static final String SERIALIZED_NAME_IMAGE_PULL_SECRETS = "imagePullSecrets";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_SECRETS)
  private List<V1LocalObjectReference> imagePullSecrets = null;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Metadata metadata;

  public static final String SERIALIZED_NAME_METRICS_CONTAINER_TEMPLATE = "metricsContainerTemplate";
  @SerializedName(SERIALIZED_NAME_METRICS_CONTAINER_TEMPLATE)
  private ContainerTemplate metricsContainerTemplate;

  public static final String SERIALIZED_NAME_NODE_SELECTOR = "nodeSelector";
  @SerializedName(SERIALIZED_NAME_NODE_SELECTOR)
  private Map<String, String> nodeSelector = null;

  public static final String SERIALIZED_NAME_PERSISTENCE = "persistence";
  @SerializedName(SERIALIZED_NAME_PERSISTENCE)
  private PersistenceStrategy persistence;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_PRIORITY_CLASS_NAME = "priorityClassName";
  @SerializedName(SERIALIZED_NAME_PRIORITY_CLASS_NAME)
  private String priorityClassName;

  public static final String SERIALIZED_NAME_RELOADER_CONTAINER_TEMPLATE = "reloaderContainerTemplate";
  @SerializedName(SERIALIZED_NAME_RELOADER_CONTAINER_TEMPLATE)
  private ContainerTemplate reloaderContainerTemplate;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private Integer replicas;

  public static final String SERIALIZED_NAME_SECURITY_CONTEXT = "securityContext";
  @SerializedName(SERIALIZED_NAME_SECURITY_CONTEXT)
  private V1PodSecurityContext securityContext = null;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_NAME = "serviceAccountName";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_NAME)
  private String serviceAccountName;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private String settings;

  public static final String SERIALIZED_NAME_START_ARGS = "startArgs";
  @SerializedName(SERIALIZED_NAME_START_ARGS)
  private List<String> startArgs = null;

  public static final String SERIALIZED_NAME_TLS = "tls";
  @SerializedName(SERIALIZED_NAME_TLS)
  private Boolean tls;

  public static final String SERIALIZED_NAME_TOLERATIONS = "tolerations";
  @SerializedName(SERIALIZED_NAME_TOLERATIONS)
  private List<V1Toleration> tolerations = null;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;


  public JetStreamBufferService affinity(V1Affinity affinity) {
    
    this.affinity = affinity;
    return this;
  }

   /**
   * Get affinity
   * @return affinity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1Affinity getAffinity() {
    return affinity;
  }


  public void setAffinity(V1Affinity affinity) {
    this.affinity = affinity;
  }


  public JetStreamBufferService bufferConfig(String bufferConfig) {
    
    this.bufferConfig = bufferConfig;
    return this;
  }

   /**
   * Optional configuration for the streams, consumers and buckets to be created in this JetStream service, if specified, it will be merged with the default configuration in numaflow-controller-config. It accepts a YAML format configuration, it may include 4 sections, \&quot;stream\&quot;, \&quot;consumer\&quot;, \&quot;otBucket\&quot; and \&quot;procBucket\&quot;. Available fields under \&quot;stream\&quot; include \&quot;retention\&quot; (e.g. interest, limits, workerQueue), \&quot;maxMsgs\&quot;, \&quot;maxAge\&quot; (e.g. 72h), \&quot;replicas\&quot; (1, 3, 5), \&quot;duplicates\&quot; (e.g. 5m). Available fields under \&quot;consumer\&quot; include \&quot;ackWait\&quot; (e.g. 60s) Available fields under \&quot;otBucket\&quot; include \&quot;maxValueSize\&quot;, \&quot;history\&quot;, \&quot;ttl\&quot; (e.g. 72h), \&quot;maxBytes\&quot;, \&quot;replicas\&quot; (1, 3, 5). Available fields under \&quot;procBucket\&quot; include \&quot;maxValueSize\&quot;, \&quot;history\&quot;, \&quot;ttl\&quot; (e.g. 72h), \&quot;maxBytes\&quot;, \&quot;replicas\&quot; (1, 3, 5).
   * @return bufferConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional configuration for the streams, consumers and buckets to be created in this JetStream service, if specified, it will be merged with the default configuration in numaflow-controller-config. It accepts a YAML format configuration, it may include 4 sections, \"stream\", \"consumer\", \"otBucket\" and \"procBucket\". Available fields under \"stream\" include \"retention\" (e.g. interest, limits, workerQueue), \"maxMsgs\", \"maxAge\" (e.g. 72h), \"replicas\" (1, 3, 5), \"duplicates\" (e.g. 5m). Available fields under \"consumer\" include \"ackWait\" (e.g. 60s) Available fields under \"otBucket\" include \"maxValueSize\", \"history\", \"ttl\" (e.g. 72h), \"maxBytes\", \"replicas\" (1, 3, 5). Available fields under \"procBucket\" include \"maxValueSize\", \"history\", \"ttl\" (e.g. 72h), \"maxBytes\", \"replicas\" (1, 3, 5).")

  public String getBufferConfig() {
    return bufferConfig;
  }


  public void setBufferConfig(String bufferConfig) {
    this.bufferConfig = bufferConfig;
  }


  public JetStreamBufferService containerTemplate(ContainerTemplate containerTemplate) {
    
    this.containerTemplate = containerTemplate;
    return this;
  }

   /**
   * Get containerTemplate
   * @return containerTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContainerTemplate getContainerTemplate() {
    return containerTemplate;
  }


  public void setContainerTemplate(ContainerTemplate containerTemplate) {
    this.containerTemplate = containerTemplate;
  }


  public JetStreamBufferService encryption(Boolean encryption) {
    
    this.encryption = encryption;
    return this;
  }

   /**
   * Whether encrypt the data at rest, defaults to false Enabling encryption might impact the performance, see https://docs.nats.io/running-a-nats-service/nats_admin/jetstream_admin/encryption_at_rest for the detail Toggling the value will impact encypting/decrypting existing messages.
   * @return encryption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether encrypt the data at rest, defaults to false Enabling encryption might impact the performance, see https://docs.nats.io/running-a-nats-service/nats_admin/jetstream_admin/encryption_at_rest for the detail Toggling the value will impact encypting/decrypting existing messages.")

  public Boolean getEncryption() {
    return encryption;
  }


  public void setEncryption(Boolean encryption) {
    this.encryption = encryption;
  }


  public JetStreamBufferService imagePullSecrets(List<V1LocalObjectReference> imagePullSecrets) {
    
    this.imagePullSecrets = imagePullSecrets;
    return this;
  }

  public JetStreamBufferService addImagePullSecretsItem(V1LocalObjectReference imagePullSecretsItem) {
    if (this.imagePullSecrets == null) {
      this.imagePullSecrets = new ArrayList<>();
    }
    this.imagePullSecrets.add(imagePullSecretsItem);
    return this;
  }

   /**
   * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
   * @return imagePullSecrets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod")

  public List<V1LocalObjectReference> getImagePullSecrets() {
    return imagePullSecrets;
  }


  public void setImagePullSecrets(List<V1LocalObjectReference> imagePullSecrets) {
    this.imagePullSecrets = imagePullSecrets;
  }


  public JetStreamBufferService metadata(Metadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Metadata getMetadata() {
    return metadata;
  }


  public void setMetadata(Metadata metadata) {
    this.metadata = metadata;
  }


  public JetStreamBufferService metricsContainerTemplate(ContainerTemplate metricsContainerTemplate) {
    
    this.metricsContainerTemplate = metricsContainerTemplate;
    return this;
  }

   /**
   * Get metricsContainerTemplate
   * @return metricsContainerTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContainerTemplate getMetricsContainerTemplate() {
    return metricsContainerTemplate;
  }


  public void setMetricsContainerTemplate(ContainerTemplate metricsContainerTemplate) {
    this.metricsContainerTemplate = metricsContainerTemplate;
  }


  public JetStreamBufferService nodeSelector(Map<String, String> nodeSelector) {
    
    this.nodeSelector = nodeSelector;
    return this;
  }

  public JetStreamBufferService putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node&#39;s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
   * @return nodeSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/")

  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }


  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }


  public JetStreamBufferService persistence(PersistenceStrategy persistence) {
    
    this.persistence = persistence;
    return this;
  }

   /**
   * Get persistence
   * @return persistence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PersistenceStrategy getPersistence() {
    return persistence;
  }


  public void setPersistence(PersistenceStrategy persistence) {
    this.persistence = persistence;
  }


  public JetStreamBufferService priority(Integer priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * The priority value. Various system components use this field to find the priority of the Redis pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The priority value. Various system components use this field to find the priority of the Redis pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/")

  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public JetStreamBufferService priorityClassName(String priorityClassName) {
    
    this.priorityClassName = priorityClassName;
    return this;
  }

   /**
   * If specified, indicates the Redis pod&#39;s priority. \&quot;system-node-critical\&quot; and \&quot;system-cluster-critical\&quot; are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
   * @return priorityClassName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If specified, indicates the Redis pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/")

  public String getPriorityClassName() {
    return priorityClassName;
  }


  public void setPriorityClassName(String priorityClassName) {
    this.priorityClassName = priorityClassName;
  }


  public JetStreamBufferService reloaderContainerTemplate(ContainerTemplate reloaderContainerTemplate) {
    
    this.reloaderContainerTemplate = reloaderContainerTemplate;
    return this;
  }

   /**
   * Get reloaderContainerTemplate
   * @return reloaderContainerTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContainerTemplate getReloaderContainerTemplate() {
    return reloaderContainerTemplate;
  }


  public void setReloaderContainerTemplate(ContainerTemplate reloaderContainerTemplate) {
    this.reloaderContainerTemplate = reloaderContainerTemplate;
  }


  public JetStreamBufferService replicas(Integer replicas) {
    
    this.replicas = replicas;
    return this;
  }

   /**
   * Redis StatefulSet size
   * @return replicas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Redis StatefulSet size")

  public Integer getReplicas() {
    return replicas;
  }


  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }


  public JetStreamBufferService securityContext(V1PodSecurityContext securityContext) {
    
    this.securityContext = securityContext;
    return this;
  }

   /**
   * Get securityContext
   * @return securityContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1PodSecurityContext getSecurityContext() {
    return securityContext;
  }


  public void setSecurityContext(V1PodSecurityContext securityContext) {
    this.securityContext = securityContext;
  }


  public JetStreamBufferService serviceAccountName(String serviceAccountName) {
    
    this.serviceAccountName = serviceAccountName;
    return this;
  }

   /**
   * ServiceAccountName to apply to the StatefulSet
   * @return serviceAccountName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ServiceAccountName to apply to the StatefulSet")

  public String getServiceAccountName() {
    return serviceAccountName;
  }


  public void setServiceAccountName(String serviceAccountName) {
    this.serviceAccountName = serviceAccountName;
  }


  public JetStreamBufferService settings(String settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * JetStream configuration, if not specified, global settings in numaflow-controller-config will be used. See https://docs.nats.io/running-a-nats-service/configuration#jetstream. Only configure \&quot;max_memory_store\&quot; or \&quot;max_file_store\&quot;, do not set \&quot;store_dir\&quot; as it has been hardcoded.
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "JetStream configuration, if not specified, global settings in numaflow-controller-config will be used. See https://docs.nats.io/running-a-nats-service/configuration#jetstream. Only configure \"max_memory_store\" or \"max_file_store\", do not set \"store_dir\" as it has been hardcoded.")

  public String getSettings() {
    return settings;
  }


  public void setSettings(String settings) {
    this.settings = settings;
  }


  public JetStreamBufferService startArgs(List<String> startArgs) {
    
    this.startArgs = startArgs;
    return this;
  }

  public JetStreamBufferService addStartArgsItem(String startArgsItem) {
    if (this.startArgs == null) {
      this.startArgs = new ArrayList<>();
    }
    this.startArgs.add(startArgsItem);
    return this;
  }

   /**
   * Optional arguments to start nats-server. For example, \&quot;-D\&quot; to enable debugging output, \&quot;-DV\&quot; to enable debugging and tracing. Check https://docs.nats.io/ for all the available arguments.
   * @return startArgs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional arguments to start nats-server. For example, \"-D\" to enable debugging output, \"-DV\" to enable debugging and tracing. Check https://docs.nats.io/ for all the available arguments.")

  public List<String> getStartArgs() {
    return startArgs;
  }


  public void setStartArgs(List<String> startArgs) {
    this.startArgs = startArgs;
  }


  public JetStreamBufferService tls(Boolean tls) {
    
    this.tls = tls;
    return this;
  }

   /**
   * Whether enable TLS, defaults to false Enabling TLS might impact the performance
   * @return tls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether enable TLS, defaults to false Enabling TLS might impact the performance")

  public Boolean getTls() {
    return tls;
  }


  public void setTls(Boolean tls) {
    this.tls = tls;
  }


  public JetStreamBufferService tolerations(List<V1Toleration> tolerations) {
    
    this.tolerations = tolerations;
    return this;
  }

  public JetStreamBufferService addTolerationsItem(V1Toleration tolerationsItem) {
    if (this.tolerations == null) {
      this.tolerations = new ArrayList<>();
    }
    this.tolerations.add(tolerationsItem);
    return this;
  }

   /**
   * If specified, the pod&#39;s tolerations.
   * @return tolerations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If specified, the pod's tolerations.")

  public List<V1Toleration> getTolerations() {
    return tolerations;
  }


  public void setTolerations(List<V1Toleration> tolerations) {
    this.tolerations = tolerations;
  }


  public JetStreamBufferService version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * JetStream version, such as \&quot;2.7.1\&quot;
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "JetStream version, such as \"2.7.1\"")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JetStreamBufferService jetStreamBufferService = (JetStreamBufferService) o;
    return Objects.equals(this.affinity, jetStreamBufferService.affinity) &&
        Objects.equals(this.bufferConfig, jetStreamBufferService.bufferConfig) &&
        Objects.equals(this.containerTemplate, jetStreamBufferService.containerTemplate) &&
        Objects.equals(this.encryption, jetStreamBufferService.encryption) &&
        Objects.equals(this.imagePullSecrets, jetStreamBufferService.imagePullSecrets) &&
        Objects.equals(this.metadata, jetStreamBufferService.metadata) &&
        Objects.equals(this.metricsContainerTemplate, jetStreamBufferService.metricsContainerTemplate) &&
        Objects.equals(this.nodeSelector, jetStreamBufferService.nodeSelector) &&
        Objects.equals(this.persistence, jetStreamBufferService.persistence) &&
        Objects.equals(this.priority, jetStreamBufferService.priority) &&
        Objects.equals(this.priorityClassName, jetStreamBufferService.priorityClassName) &&
        Objects.equals(this.reloaderContainerTemplate, jetStreamBufferService.reloaderContainerTemplate) &&
        Objects.equals(this.replicas, jetStreamBufferService.replicas) &&
        Objects.equals(this.securityContext, jetStreamBufferService.securityContext) &&
        Objects.equals(this.serviceAccountName, jetStreamBufferService.serviceAccountName) &&
        Objects.equals(this.settings, jetStreamBufferService.settings) &&
        Objects.equals(this.startArgs, jetStreamBufferService.startArgs) &&
        Objects.equals(this.tls, jetStreamBufferService.tls) &&
        Objects.equals(this.tolerations, jetStreamBufferService.tolerations) &&
        Objects.equals(this.version, jetStreamBufferService.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affinity, bufferConfig, containerTemplate, encryption, imagePullSecrets, metadata, metricsContainerTemplate, nodeSelector, persistence, priority, priorityClassName, reloaderContainerTemplate, replicas, securityContext, serviceAccountName, settings, startArgs, tls, tolerations, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JetStreamBufferService {\n");
    sb.append("    affinity: ").append(toIndentedString(affinity)).append("\n");
    sb.append("    bufferConfig: ").append(toIndentedString(bufferConfig)).append("\n");
    sb.append("    containerTemplate: ").append(toIndentedString(containerTemplate)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    imagePullSecrets: ").append(toIndentedString(imagePullSecrets)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    metricsContainerTemplate: ").append(toIndentedString(metricsContainerTemplate)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    persistence: ").append(toIndentedString(persistence)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    priorityClassName: ").append(toIndentedString(priorityClassName)).append("\n");
    sb.append("    reloaderContainerTemplate: ").append(toIndentedString(reloaderContainerTemplate)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    securityContext: ").append(toIndentedString(securityContext)).append("\n");
    sb.append("    serviceAccountName: ").append(toIndentedString(serviceAccountName)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    startArgs: ").append(toIndentedString(startArgs)).append("\n");
    sb.append("    tls: ").append(toIndentedString(tls)).append("\n");
    sb.append("    tolerations: ").append(toIndentedString(tolerations)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

